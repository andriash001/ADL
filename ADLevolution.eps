%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Untitled Diagram (11).pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: andri
%%CreationDate: 10/12/2018, 9:51:52 AM
%%BoundingBox: 0 0 743 303
%%HiResBoundingBox: 0 0 743 303
%%CropBox: 0 0 743 303
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 561 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2018-10-12T01:50:09Z"
   xmp:CreatorTool="Chromium"
   xmp:ModifyDate="2018-10-12T01:50:09Z"
   pdf:Producer="Skia/PDF m64"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -303 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 303 li
743 303 li
743 0 li
cp
clp
0 0 mo
743 0 li
743 302.81 li
0 302.81 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
0 0 mo
743 0 li
743 302.81 li
0 302.81 li
cp
eclp
.719264 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
45.6733 .359632 mo
695.888 .359632 li
701.897 .359632 707.677 1.5094 713.229 3.80893 cv
718.78 6.10846 723.681 9.38271 727.93 13.6317 cv
732.179 17.8807 735.453 22.7809 737.752 28.3325 cv
740.052 33.884 741.202 39.6643 741.202 45.6733 cv
741.202 257.137 li
741.202 263.146 740.052 268.926 737.752 274.478 cv
735.453 280.029 732.179 284.93 727.93 289.179 cv
723.681 293.427 718.78 296.702 713.229 299.001 cv
707.677 301.301 701.897 302.451 695.888 302.451 cv
45.6733 302.451 li
39.6643 302.451 33.884 301.301 28.3325 299.001 cv
22.7809 296.702 17.8807 293.427 13.6317 289.179 cv
9.38271 284.93 6.10846 280.029 3.80893 274.478 cv
1.5094 268.926 .359632 263.146 .359632 257.137 cv
.359632 45.6733 li
.359632 39.6643 1.5094 33.884 3.80893 28.3325 cv
6.10846 22.7809 9.38271 17.8807 13.6317 13.6317 cv
17.8807 9.38271 22.7809 6.10846 28.3325 3.80893 cv
33.884 1.5094 39.6643 .359632 45.6733 .359632 cv
cp
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
1.43853 lw
295.258 160.396 mo
315.397 160.396 li
316.589 160.396 317.606 160.817 318.449 161.66 cv
319.292 162.503 319.713 163.52 319.713 164.712 cv
319.713 184.851 li
319.713 186.043 319.292 187.06 318.449 187.902 cv
317.606 188.745 316.589 189.166 315.397 189.166 cv
295.258 189.166 li
294.066 189.166 293.049 188.745 292.206 187.902 cv
291.364 187.06 290.942 186.043 290.942 184.851 cv
290.942 164.712 li
290.942 163.52 291.364 162.503 292.206 161.66 cv
293.049 160.817 294.066 160.396 295.258 160.396 cv
cp
@
.719264 lw
65.8127 201.034 mo
85.9521 201.034 li
87.1438 201.034 88.161 201.456 89.0036 202.298 cv
89.8463 203.141 90.2677 204.158 90.2677 205.35 cv
90.2677 225.489 li
90.2677 226.681 89.8463 227.698 89.0036 228.541 cv
88.161 229.384 87.1438 229.805 85.9521 229.805 cv
65.8127 229.805 li
64.621 229.805 63.6038 229.384 62.7611 228.541 cv
61.9184 227.698 61.4971 226.681 61.4971 225.489 cv
61.4971 205.35 li
61.4971 204.158 61.9184 203.141 62.7611 202.298 cv
63.6038 201.456 64.621 201.034 65.8127 201.034 cv
cp
@
55.0237 252.821 mo
55.0237 249.842 53.9704 247.299 51.8637 245.192 cv
49.757 243.086 47.214 242.032 44.2347 242.032 cv
41.2555 242.032 38.7125 243.086 36.6058 245.192 cv
34.4991 247.299 33.4458 249.842 33.4458 252.821 cv
33.4458 255.801 34.4991 258.344 36.6058 260.45 cv
38.7125 262.557 41.2555 263.61 44.2347 263.61 cv
47.214 263.61 49.757 262.557 51.8637 260.45 cv
53.9704 258.344 55.0237 255.801 55.0237 252.821 cv
cp
@
10 ml
75.1631 242.752 mo
75.8824 242.752 li
75.8824 230.79 li
@
75.8824 227.014 mo
78.3998 232.049 li
75.8824 230.79 li
73.3649 232.049 li
75.8824 227.014 li
cp
f
75.8824 227.014 mo
78.3998 232.049 li
75.8824 230.79 li
73.3649 232.049 li
75.8824 227.014 li
cp
@
4 ml
85.5924 252.821 mo
85.5924 249.941 84.5742 247.483 82.5378 245.447 cv
80.5013 243.41 78.0431 242.392 75.1631 242.392 cv
72.2831 242.392 69.8249 243.41 67.7885 245.447 cv
65.752 247.483 64.7338 249.941 64.7338 252.821 cv
64.7338 255.701 65.752 258.16 67.7885 260.196 cv
69.8249 262.232 72.2831 263.251 75.1631 263.251 cv
78.0431 263.251 80.5013 262.232 82.5378 260.196 cv
84.5742 258.16 85.5924 255.701 85.5924 252.821 cv
cp
@
86.6713 215.42 mo
86.6713 212.44 85.618 209.897 83.5113 207.791 cv
81.4046 205.684 78.8617 204.631 75.8824 204.631 cv
72.9031 204.631 70.3601 205.684 68.2534 207.791 cv
66.1467 209.897 65.0934 212.44 65.0934 215.42 cv
65.0934 218.399 66.1467 220.942 68.2534 223.049 cv
70.3601 225.155 72.9031 226.209 75.8824 226.209 cv
78.8617 226.209 81.4046 225.155 83.5113 223.049 cv
85.618 220.942 86.6713 218.399 86.6713 215.42 cv
cp
@
10 ml
91.7062 128.389 mo
90.2677 128.389 li
90.2677 112.831 li
@
90.2677 109.055 mo
92.7851 114.09 li
90.2677 112.831 li
87.7502 114.09 li
90.2677 109.055 li
cp
f
90.2677 109.055 mo
92.7851 114.09 li
90.2677 112.831 li
87.7502 114.09 li
90.2677 109.055 li
cp
@
4 ml
102.495 139.178 mo
102.495 136.198 101.442 133.655 99.3351 131.549 cv
97.2284 129.442 94.6855 128.389 91.7062 128.389 cv
88.7269 128.389 86.1839 129.442 84.0772 131.549 cv
81.9706 133.655 80.9172 136.198 80.9172 139.178 cv
80.9172 142.157 81.9706 144.7 84.0772 146.807 cv
86.1839 148.913 88.7269 149.967 91.7062 149.967 cv
94.6855 149.967 97.2284 148.913 99.3351 146.807 cv
101.442 144.7 102.495 142.157 102.495 139.178 cv
cp
@
116.88 252.821 mo
116.88 249.842 115.827 247.299 113.72 245.192 cv
111.614 243.086 109.071 242.032 106.091 242.032 cv
103.112 242.032 100.569 243.086 98.4625 245.192 cv
96.3558 247.299 95.3025 249.842 95.3025 252.821 cv
95.3025 255.801 96.3558 258.344 98.4625 260.45 cv
100.569 262.557 103.112 263.61 106.091 263.61 cv
109.071 263.61 111.614 262.557 113.72 260.45 cv
115.827 258.344 116.88 255.801 116.88 252.821 cv
cp
@
10 ml
44.2347 242.032 mo
64.3741 226.165 li
@
67.3375 223.828 mo
64.9424 228.92 li
64.3741 226.165 li
61.828 224.964 li
67.3375 223.828 li
cp
f
67.3375 223.828 mo
64.9424 228.92 li
64.3741 226.165 li
61.828 224.964 li
67.3375 223.828 li
cp
@
98.1796 244.909 mo
86.3333 227.144 li
@
84.2402 224 mo
89.1312 226.791 li
86.3333 227.144 li
84.9379 229.589 li
84.2402 224 li
cp
f
84.2402 224 mo
89.1312 226.791 li
86.3333 227.144 li
84.9379 229.589 li
84.2402 224 li
cp
@
60.0586 86.6713 mo
60.0586 76.8678 li
@
60.0586 73.0916 mo
62.576 78.1265 li
60.0586 76.8678 li
57.5411 78.1265 li
60.0586 73.0916 li
cp
f
60.0586 73.0916 mo
62.576 78.1265 li
60.0586 76.8678 li
57.5411 78.1265 li
60.0586 73.0916 li
cp
@
70.8475 97.4603 mo
70.8475 100.44 69.7942 102.983 67.6875 105.089 cv
65.5808 107.196 63.0378 108.249 60.0586 108.249 cv
57.0793 108.249 54.5363 107.196 52.4296 105.089 cv
50.3229 102.983 49.2696 100.44 49.2696 97.4603 cv
49.2696 94.481 50.3229 91.938 52.4296 89.8313 cv
54.5363 87.7247 57.0793 86.6713 60.0586 86.6713 cv
63.0378 86.6713 65.5808 87.7247 67.6875 89.8313 cv
69.7942 91.938 70.8475 94.481 70.8475 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
70.8475 97.4603 mo
70.8475 100.44 69.7942 102.983 67.6875 105.089 cv
65.5808 107.196 63.0378 108.249 60.0586 108.249 cv
57.0793 108.249 54.5363 107.196 52.4296 105.089 cv
50.3229 102.983 49.2696 100.44 49.2696 97.4603 cv
49.2696 94.481 50.3229 91.938 52.4296 89.8313 cv
54.5363 87.7247 57.0793 86.6713 60.0586 86.6713 cv
63.0378 86.6713 65.5808 87.7247 67.6875 89.8313 cv
69.7942 91.938 70.8475 94.481 70.8475 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
63.0795 101.776 mo
57.0377 101.776 li
61.3532 97.4603 li
57.0377 93.1447 li
63.0795 93.1447 li
@
57.9008 50.7081 mo
715.042 50.7081 li
@
718.818 50.7081 mo
713.783 53.2256 li
715.042 50.7081 li
713.783 48.1907 li
718.818 50.7081 li
cp
f
718.818 50.7081 mo
713.783 53.2256 li
715.042 50.7081 li
713.783 48.1907 li
718.818 50.7081 li
cp
@
57.9008 26.9724 mo
715.042 26.9724 li
@
718.818 26.9724 mo
713.783 29.4898 li
715.042 26.9724 li
713.783 24.455 li
718.818 26.9724 li
cp
f
718.818 26.9724 mo
713.783 29.4898 li
715.042 26.9724 li
713.783 24.455 li
718.818 26.9724 li
cp
@
74.4438 32.7265 mo
74.4438 19.7798 li
@
60.0586 128.389 mo
60.0586 112.831 li
@
60.0586 109.055 mo
62.576 114.09 li
60.0586 112.831 li
57.5411 114.09 li
60.0586 109.055 li
cp
f
60.0586 109.055 mo
62.576 114.09 li
60.0586 112.831 li
57.5411 114.09 li
60.0586 109.055 li
cp
@
4 ml
70.8475 139.178 mo
70.8475 136.198 69.7942 133.655 67.6875 131.549 cv
65.5808 129.442 63.0378 128.389 60.0586 128.389 cv
57.0793 128.389 54.5363 129.442 52.4296 131.549 cv
50.3229 133.655 49.2696 136.198 49.2696 139.178 cv
49.2696 142.157 50.3229 144.7 52.4296 146.807 cv
54.5363 148.913 57.0793 149.967 60.0586 149.967 cv
63.0378 149.967 65.5808 148.913 67.6875 146.807 cv
69.7942 144.7 70.8475 142.157 70.8475 139.178 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
10 ml
75.8824 204.631 mo
90.4331 154.368 li
@
91.4832 150.736 mo
92.4974 156.275 li
90.4331 154.368 li
87.6639 154.872 li
91.4832 150.736 li
cp
f
91.4832 150.736 mo
92.4974 156.275 li
90.4331 154.368 li
87.6639 154.872 li
91.4832 150.736 li
cp
@
75.8824 204.631 mo
61.3317 154.368 li
@
60.2815 150.736 mo
64.1008 154.872 li
61.3317 154.368 li
59.2674 156.275 li
60.2815 150.736 li
cp
f
60.2815 150.736 mo
64.1008 154.872 li
61.3317 154.368 li
59.2674 156.275 li
60.2815 150.736 li
cp
@
90.2677 86.6713 mo
90.2677 76.8678 li
@
90.2677 73.0916 mo
92.7851 78.1265 li
90.2677 76.8678 li
87.7502 78.1265 li
90.2677 73.0916 li
cp
f
90.2677 73.0916 mo
92.7851 78.1265 li
90.2677 76.8678 li
87.7502 78.1265 li
90.2677 73.0916 li
cp
@
101.057 97.4603 mo
101.057 100.44 100.003 102.983 97.8966 105.089 cv
95.7899 107.196 93.2469 108.249 90.2677 108.249 cv
87.2884 108.249 84.7454 107.196 82.6387 105.089 cv
80.532 102.983 79.4787 100.44 79.4787 97.4603 cv
79.4787 94.481 80.532 91.938 82.6387 89.8313 cv
84.7454 87.7247 87.2884 86.6713 90.2677 86.6713 cv
93.2469 86.6713 95.7899 87.7247 97.8966 89.8313 cv
100.003 91.938 101.057 94.481 101.057 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
101.057 97.4603 mo
101.057 100.44 100.003 102.983 97.8966 105.089 cv
95.7899 107.196 93.2469 108.249 90.2677 108.249 cv
87.2884 108.249 84.7454 107.196 82.6387 105.089 cv
80.532 102.983 79.4787 100.44 79.4787 97.4603 cv
79.4787 94.481 80.532 91.938 82.6387 89.8313 cv
84.7454 87.7247 87.2884 86.6713 90.2677 86.6713 cv
93.2469 86.6713 95.7899 87.7247 97.8966 89.8313 cv
100.003 91.938 101.057 94.481 101.057 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
93.2886 101.776 mo
87.2467 101.776 li
91.5623 97.4603 li
87.2467 93.1447 li
93.2886 93.1447 li
@
178.737 56.4622 mo
178.737 43.5155 li
@
4 ml
149.967 201.034 mo
170.106 201.034 li
171.298 201.034 172.315 201.456 173.158 202.298 cv
174 203.141 174.422 204.158 174.422 205.35 cv
174.422 225.489 li
174.422 226.681 174 227.698 173.158 228.541 cv
172.315 229.384 171.298 229.805 170.106 229.805 cv
149.967 229.805 li
148.775 229.805 147.758 229.384 146.915 228.541 cv
146.072 227.698 145.651 226.681 145.651 225.489 cv
145.651 205.35 li
145.651 204.158 146.072 203.141 146.915 202.298 cv
147.758 201.456 148.775 201.034 149.967 201.034 cv
cp
@
159.317 252.821 mo
159.317 249.842 158.264 247.299 156.157 245.192 cv
154.05 243.086 151.507 242.032 148.528 242.032 cv
145.549 242.032 143.006 243.086 140.899 245.192 cv
138.792 247.299 137.739 249.842 137.739 252.821 cv
137.739 255.801 138.792 258.344 140.899 260.45 cv
143.006 262.557 145.549 263.61 148.528 263.61 cv
151.507 263.61 154.05 262.557 156.157 260.45 cv
158.264 258.344 159.317 255.801 159.317 252.821 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
189.886 252.821 mo
189.886 249.941 188.867 247.483 186.831 245.447 cv
184.795 243.41 182.336 242.392 179.456 242.392 cv
176.576 242.392 174.118 243.41 172.082 245.447 cv
170.045 247.483 169.027 249.941 169.027 252.821 cv
169.027 255.701 170.045 258.16 172.082 260.196 cv
174.118 262.232 176.576 263.251 179.456 263.251 cv
182.336 263.251 184.795 262.232 186.831 260.196 cv
188.867 258.16 189.886 255.701 189.886 252.821 cv
cp
@
170.825 215.42 mo
170.825 212.44 169.772 209.897 167.665 207.791 cv
165.559 205.684 163.016 204.631 160.036 204.631 cv
157.057 204.631 154.514 205.684 152.407 207.791 cv
150.301 209.897 149.247 212.44 149.247 215.42 cv
149.247 218.399 150.301 220.942 152.407 223.049 cv
154.514 225.155 157.057 226.209 160.036 226.209 cv
163.016 226.209 165.559 225.155 167.665 223.049 cv
169.772 220.942 170.825 218.399 170.825 215.42 cv
cp
@
10 ml
195.999 128.389 mo
194.561 128.389 li
194.561 112.831 li
@
194.561 109.055 mo
197.078 114.09 li
194.561 112.831 li
192.044 114.09 li
194.561 109.055 li
cp
f
194.561 109.055 mo
197.078 114.09 li
194.561 112.831 li
192.044 114.09 li
194.561 109.055 li
cp
@
4 ml
206.788 139.178 mo
206.788 136.198 205.735 133.655 203.628 131.549 cv
201.522 129.442 198.979 128.389 195.999 128.389 cv
193.02 128.389 190.477 129.442 188.371 131.549 cv
186.264 133.655 185.211 136.198 185.211 139.178 cv
185.211 142.157 186.264 144.7 188.371 146.807 cv
190.477 148.913 193.02 149.967 195.999 149.967 cv
198.979 149.967 201.522 148.913 203.628 146.807 cv
205.735 144.7 206.788 142.157 206.788 139.178 cv
cp
@
221.174 252.821 mo
221.174 249.842 220.12 247.299 218.014 245.192 cv
215.907 243.086 213.364 242.032 210.385 242.032 cv
207.405 242.032 204.863 243.086 202.756 245.192 cv
200.649 247.299 199.596 249.842 199.596 252.821 cv
199.596 255.801 200.649 258.344 202.756 260.45 cv
204.863 262.557 207.405 263.61 210.385 263.61 cv
213.364 263.61 215.907 262.557 218.014 260.45 cv
220.12 258.344 221.174 255.801 221.174 252.821 cv
cp
@
10 ml
148.528 242.032 mo
157.339 229.913 li
@
159.562 226.856 mo
158.641 232.409 li
157.339 229.913 li
154.563 229.452 li
159.562 226.856 li
cp
f
159.562 226.856 mo
158.641 232.409 li
157.339 229.913 li
154.563 229.452 li
159.562 226.856 li
cp
@
210.385 242.032 mo
172.141 225.18 li
@
168.682 223.655 mo
174.306 223.382 li
172.141 225.18 li
172.278 227.992 li
168.682 223.655 li
cp
f
168.682 223.655 mo
174.306 223.382 li
172.141 225.18 li
172.278 227.992 li
168.682 223.655 li
cp
@
160.036 86.6713 mo
160.036 76.8678 li
@
160.036 73.0916 mo
162.554 78.1265 li
160.036 76.8678 li
157.519 78.1265 li
160.036 73.0916 li
cp
f
160.036 73.0916 mo
162.554 78.1265 li
160.036 76.8678 li
157.519 78.1265 li
160.036 73.0916 li
cp
@
170.825 97.4603 mo
170.825 100.44 169.772 102.983 167.665 105.089 cv
165.559 107.196 163.016 108.249 160.036 108.249 cv
157.057 108.249 154.514 107.196 152.407 105.089 cv
150.301 102.983 149.247 100.44 149.247 97.4603 cv
149.247 94.481 150.301 91.938 152.407 89.8313 cv
154.514 87.7247 157.057 86.6713 160.036 86.6713 cv
163.016 86.6713 165.559 87.7247 167.665 89.8313 cv
169.772 91.938 170.825 94.481 170.825 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
170.825 97.4603 mo
170.825 100.44 169.772 102.983 167.665 105.089 cv
165.559 107.196 163.016 108.249 160.036 108.249 cv
157.057 108.249 154.514 107.196 152.407 105.089 cv
150.301 102.983 149.247 100.44 149.247 97.4603 cv
149.247 94.481 150.301 91.938 152.407 89.8313 cv
154.514 87.7247 157.057 86.6713 160.036 86.6713 cv
163.016 86.6713 165.559 87.7247 167.665 89.8313 cv
169.772 91.938 170.825 94.481 170.825 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
163.057 101.776 mo
157.015 101.776 li
161.331 97.4603 li
157.015 93.1447 li
163.057 93.1447 li
@
160.036 128.389 mo
160.036 112.831 li
@
160.036 109.055 mo
162.554 114.09 li
160.036 112.831 li
157.519 114.09 li
160.036 109.055 li
cp
f
160.036 109.055 mo
162.554 114.09 li
160.036 112.831 li
157.519 114.09 li
160.036 109.055 li
cp
@
4 ml
170.825 139.178 mo
170.825 136.198 169.772 133.655 167.665 131.549 cv
165.559 129.442 163.016 128.389 160.036 128.389 cv
157.057 128.389 154.514 129.442 152.407 131.549 cv
150.301 133.655 149.247 136.198 149.247 139.178 cv
149.247 142.157 150.301 144.7 152.407 146.807 cv
154.514 148.913 157.057 149.967 160.036 149.967 cv
163.016 149.967 165.559 148.913 167.665 146.807 cv
169.772 144.7 170.825 142.157 170.825 139.178 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
10 ml
160.036 204.631 mo
193.482 153.793 li
@
195.561 150.635 mo
194.892 156.231 li
193.482 153.793 li
190.684 153.462 li
195.561 150.635 li
cp
f
195.561 150.635 mo
194.892 156.231 li
193.482 153.793 li
190.684 153.462 li
195.561 150.635 li
cp
@
160.036 204.631 mo
160.036 154.548 li
@
160.036 150.772 mo
162.554 155.807 li
160.036 154.548 li
157.519 155.807 li
160.036 150.772 li
cp
f
160.036 150.772 mo
162.554 155.807 li
160.036 154.548 li
157.519 155.807 li
160.036 150.772 li
cp
@
194.561 86.6713 mo
194.561 76.8678 li
@
194.561 73.0916 mo
197.078 78.1265 li
194.561 76.8678 li
192.044 78.1265 li
194.561 73.0916 li
cp
f
194.561 73.0916 mo
197.078 78.1265 li
194.561 76.8678 li
192.044 78.1265 li
194.561 73.0916 li
cp
@
205.35 97.4603 mo
205.35 100.44 204.297 102.983 202.19 105.089 cv
200.083 107.196 197.54 108.249 194.561 108.249 cv
191.582 108.249 189.039 107.196 186.932 105.089 cv
184.825 102.983 183.772 100.44 183.772 97.4603 cv
183.772 94.481 184.825 91.938 186.932 89.8313 cv
189.039 87.7247 191.582 86.6713 194.561 86.6713 cv
197.54 86.6713 200.083 87.7247 202.19 89.8313 cv
204.297 91.938 205.35 94.481 205.35 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
205.35 97.4603 mo
205.35 100.44 204.297 102.983 202.19 105.089 cv
200.083 107.196 197.54 108.249 194.561 108.249 cv
191.582 108.249 189.039 107.196 186.932 105.089 cv
184.825 102.983 183.772 100.44 183.772 97.4603 cv
183.772 94.481 184.825 91.938 186.932 89.8313 cv
189.039 87.7247 191.582 86.6713 194.561 86.6713 cv
197.54 86.6713 200.083 87.7247 202.19 89.8313 cv
204.297 91.938 205.35 94.481 205.35 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
197.582 101.776 mo
191.54 101.776 li
195.856 97.4603 li
191.54 93.1447 li
197.582 93.1447 li
@
1.43853 lw
4 ml
206.429 215.06 mo
206.429 218.039 205.375 220.582 203.269 222.689 cv
201.162 224.796 198.619 225.849 195.64 225.849 cv
192.661 225.849 190.118 224.796 188.011 222.689 cv
185.904 220.582 184.851 218.039 184.851 215.06 cv
184.851 212.081 185.904 209.538 188.011 207.431 cv
190.118 205.324 192.661 204.271 195.64 204.271 cv
198.619 204.271 201.162 205.324 203.269 207.431 cv
205.375 209.538 206.429 212.081 206.429 215.06 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
10 ml
184.851 215.06 mo
206.429 215.06 li
@
195.64 204.271 mo
195.64 225.849 li
@
210.025 241.673 mo
199.625 230.229 li
@
196.719 227.036 mo
202.725 229.359 li
199.625 230.229 li
198.467 233.229 li
196.719 227.036 li
cp
f
196.719 227.036 mo
202.725 229.359 li
199.625 230.229 li
198.467 233.229 li
196.719 227.036 li
cp
@
148.168 241.673 mo
185.052 227.92 li
@
189.095 226.41 mo
184.714 231.114 li
185.052 227.92 li
182.7 225.727 li
189.095 226.41 li
cp
f
189.095 226.41 mo
184.714 231.114 li
185.052 227.92 li
182.7 225.727 li
189.095 226.41 li
cp
@
179.097 242.392 mo
191.454 230.035 li
@
194.503 226.985 mo
192.468 233.092 li
191.454 230.035 li
188.397 229.021 li
194.503 226.985 li
cp
f
194.503 226.985 mo
192.468 233.092 li
191.454 230.035 li
188.397 229.021 li
194.503 226.985 li
cp
@
195.64 204.271 mo
162.935 154.555 li
@
160.561 150.952 mo
166.128 154.174 li
162.935 154.555 li
161.317 157.339 li
160.561 150.952 li
cp
f
160.561 150.952 mo
166.128 154.174 li
162.935 154.555 li
161.317 157.339 li
160.561 150.952 li
cp
@
195.64 204.271 mo
195.64 155.534 li
@
195.64 151.218 mo
198.517 156.972 li
195.64 155.534 li
192.763 156.972 li
195.64 151.218 li
cp
f
195.64 151.218 mo
198.517 156.972 li
195.64 155.534 li
192.763 156.972 li
195.64 151.218 li
cp
@
.719264 lw
179.456 242.752 mo
163.525 229.179 li
@
160.648 226.726 mo
166.114 228.079 li
163.525 229.179 li
162.849 231.912 li
160.648 226.726 li
cp
f
160.648 226.726 mo
166.114 228.079 li
163.525 229.179 li
162.849 231.912 li
160.648 226.726 li
cp
@
2.15779 lw
221.893 82.7154 mo
250.592 82.7154 li
@
255.447 82.7154 mo
248.973 85.9521 li
250.592 82.7154 li
248.973 79.4787 li
255.447 82.7154 li
cp
f
255.447 82.7154 mo
248.973 85.9521 li
250.592 82.7154 li
248.973 79.4787 li
255.447 82.7154 li
cp
@
.719264 lw
4 ml
276.557 201.034 mo
334.098 201.034 li
335.29 201.034 336.307 201.456 337.15 202.298 cv
337.992 203.141 338.414 204.158 338.414 205.35 cv
338.414 225.489 li
338.414 226.681 337.992 227.698 337.15 228.541 cv
336.307 229.384 335.29 229.805 334.098 229.805 cv
276.557 229.805 li
275.365 229.805 274.348 229.384 273.505 228.541 cv
272.663 227.698 272.241 226.681 272.241 225.489 cv
272.241 205.35 li
272.241 204.158 272.663 203.141 273.505 202.298 cv
274.348 201.456 275.365 201.034 276.557 201.034 cv
cp
@
285.908 253.541 mo
285.908 250.561 284.854 248.018 282.747 245.912 cv
280.641 243.805 278.098 242.752 275.119 242.752 cv
272.139 242.752 269.596 243.805 267.49 245.912 cv
265.383 248.018 264.33 250.561 264.33 253.541 cv
264.33 256.52 265.383 259.063 267.49 261.17 cv
269.596 263.276 272.139 264.33 275.119 264.33 cv
278.098 264.33 280.641 263.276 282.747 261.17 cv
284.854 259.063 285.908 256.52 285.908 253.541 cv
cp
@
316.476 253.541 mo
316.476 250.661 315.458 248.202 313.422 246.166 cv
311.385 244.13 308.927 243.111 306.047 243.111 cv
303.167 243.111 300.709 244.13 298.672 246.166 cv
296.636 248.202 295.618 250.661 295.618 253.541 cv
295.618 256.421 296.636 258.879 298.672 260.915 cv
300.709 262.952 303.167 263.97 306.047 263.97 cv
308.927 263.97 311.385 262.952 313.422 260.915 cv
315.458 258.879 316.476 256.421 316.476 253.541 cv
cp
@
297.416 215.42 mo
297.416 212.44 296.362 209.897 294.256 207.791 cv
292.149 205.684 289.606 204.631 286.627 204.631 cv
283.647 204.631 281.104 205.684 278.998 207.791 cv
276.891 209.897 275.838 212.44 275.838 215.42 cv
275.838 218.399 276.891 220.942 278.998 223.049 cv
281.104 225.155 283.647 226.209 286.627 226.209 cv
289.606 226.209 292.149 225.155 294.256 223.049 cv
296.362 220.942 297.416 218.399 297.416 215.42 cv
cp
@
353.518 175.141 mo
353.518 172.162 352.465 169.619 350.358 167.512 cv
348.252 165.405 345.709 164.352 342.729 164.352 cv
339.75 164.352 337.207 165.405 335.1 167.512 cv
332.994 169.619 331.94 172.162 331.94 175.141 cv
331.94 178.12 332.994 180.663 335.1 182.77 cv
337.207 184.876 339.75 185.93 342.729 185.93 cv
345.709 185.93 348.252 184.876 350.358 182.77 cv
352.465 180.663 353.518 178.12 353.518 175.141 cv
cp
@
347.764 253.541 mo
347.764 250.561 346.711 248.018 344.604 245.912 cv
342.498 243.805 339.955 242.752 336.975 242.752 cv
333.996 242.752 331.453 243.805 329.346 245.912 cv
327.24 248.018 326.186 250.561 326.186 253.541 cv
326.186 256.52 327.24 259.063 329.346 261.17 cv
331.453 263.276 333.996 264.33 336.975 264.33 cv
339.955 264.33 342.498 263.276 344.604 261.17 cv
346.711 259.063 347.764 256.52 347.764 253.541 cv
cp
@
10 ml
275.119 242.752 mo
284.009 229.97 li
@
286.166 226.87 mo
285.361 232.437 li
284.009 229.97 li
281.225 229.568 li
286.166 226.87 li
cp
f
286.166 226.87 mo
285.361 232.437 li
284.009 229.97 li
281.225 229.568 li
286.166 226.87 li
cp
@
336.975 242.752 mo
298.703 225.238 li
@
295.272 223.67 mo
300.897 223.475 li
298.703 225.238 li
298.804 228.05 li
295.272 223.67 li
cp
f
295.272 223.67 mo
300.897 223.475 li
298.703 225.238 li
298.804 228.05 li
295.272 223.67 li
cp
@
286.627 86.6713 mo
286.627 76.8678 li
@
286.627 73.0916 mo
289.144 78.1265 li
286.627 76.8678 li
284.109 78.1265 li
286.627 73.0916 li
cp
f
286.627 73.0916 mo
289.144 78.1265 li
286.627 76.8678 li
284.109 78.1265 li
286.627 73.0916 li
cp
@
297.416 97.4603 mo
297.416 100.44 296.362 102.983 294.256 105.089 cv
292.149 107.196 289.606 108.249 286.627 108.249 cv
283.647 108.249 281.104 107.196 278.998 105.089 cv
276.891 102.983 275.838 100.44 275.838 97.4603 cv
275.838 94.481 276.891 91.938 278.998 89.8313 cv
281.104 87.7247 283.647 86.6713 286.627 86.6713 cv
289.606 86.6713 292.149 87.7247 294.256 89.8313 cv
296.362 91.938 297.416 94.481 297.416 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
297.416 97.4603 mo
297.416 100.44 296.362 102.983 294.256 105.089 cv
292.149 107.196 289.606 108.249 286.627 108.249 cv
283.647 108.249 281.104 107.196 278.998 105.089 cv
276.891 102.983 275.838 100.44 275.838 97.4603 cv
275.838 94.481 276.891 91.938 278.998 89.8313 cv
281.104 87.7247 283.647 86.6713 286.627 86.6713 cv
289.606 86.6713 292.149 87.7247 294.256 89.8313 cv
296.362 91.938 297.416 94.481 297.416 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
289.648 101.776 mo
283.606 101.776 li
287.921 97.4603 li
283.606 93.1447 li
289.648 93.1447 li
@
4 ml
272.241 175.141 mo
272.241 172.162 271.188 169.619 269.081 167.512 cv
266.975 165.405 264.432 164.352 261.453 164.352 cv
258.473 164.352 255.93 165.405 253.824 167.512 cv
251.717 169.619 250.664 172.162 250.664 175.141 cv
250.664 178.12 251.717 180.663 253.824 182.77 cv
255.93 184.876 258.473 185.93 261.453 185.93 cv
264.432 185.93 266.975 184.876 269.081 182.77 cv
271.188 180.663 272.241 178.12 272.241 175.141 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
10 ml
321.151 86.6713 mo
321.151 76.8678 li
@
321.151 73.0916 mo
323.669 78.1265 li
321.151 76.8678 li
318.634 78.1265 li
321.151 73.0916 li
cp
f
321.151 73.0916 mo
323.669 78.1265 li
321.151 76.8678 li
318.634 78.1265 li
321.151 73.0916 li
cp
@
331.94 97.4603 mo
331.94 100.44 330.887 102.983 328.78 105.089 cv
326.674 107.196 324.131 108.249 321.151 108.249 cv
318.172 108.249 315.629 107.196 313.523 105.089 cv
311.416 102.983 310.363 100.44 310.363 97.4603 cv
310.363 94.481 311.416 91.938 313.523 89.8313 cv
315.629 87.7247 318.172 86.6713 321.151 86.6713 cv
324.131 86.6713 326.674 87.7247 328.78 89.8313 cv
330.887 91.938 331.94 94.481 331.94 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
331.94 97.4603 mo
331.94 100.44 330.887 102.983 328.78 105.089 cv
326.674 107.196 324.131 108.249 321.151 108.249 cv
318.172 108.249 315.629 107.196 313.523 105.089 cv
311.416 102.983 310.363 100.44 310.363 97.4603 cv
310.363 94.481 311.416 91.938 313.523 89.8313 cv
315.629 87.7247 318.172 86.6713 321.151 86.6713 cv
324.131 86.6713 326.674 87.7247 328.78 89.8313 cv
330.887 91.938 331.94 94.481 331.94 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
324.172 101.776 mo
318.131 101.776 li
322.446 97.4603 li
318.131 93.1447 li
324.172 93.1447 li
@
336.975 242.752 mo
325.668 230.316 li
@
323.129 227.525 mo
328.38 229.553 li
325.668 230.316 li
324.654 232.941 li
323.129 227.525 li
cp
f
323.129 227.525 mo
328.38 229.553 li
325.668 230.316 li
324.654 232.941 li
323.129 227.525 li
cp
@
275.119 242.752 mo
310.535 226.007 li
@
313.952 224.396 mo
310.478 228.82 li
310.535 226.007 li
308.32 224.274 li
313.952 224.396 li
cp
f
313.952 224.396 mo
310.478 228.82 li
310.535 226.007 li
308.32 224.274 li
313.952 224.396 li
cp
@
306.047 243.471 mo
319.353 230.165 li
@
322.022 227.496 mo
320.238 232.84 li
319.353 230.165 li
316.678 229.28 li
322.022 227.496 li
cp
f
322.022 227.496 mo
320.238 232.84 li
319.353 230.165 li
316.678 229.28 li
322.022 227.496 li
cp
@
306.047 243.471 mo
290.05 229.251 li
@
287.231 226.741 mo
292.661 228.208 li
290.05 229.251 li
289.317 231.97 li
287.231 226.741 li
cp
f
287.231 226.741 mo
292.661 228.208 li
290.05 229.251 li
289.317 231.97 li
287.231 226.741 li
cp
@
4 ml
333.379 215.42 mo
333.379 212.44 332.326 209.897 330.219 207.791 cv
328.112 205.684 325.569 204.631 322.59 204.631 cv
319.611 204.631 317.068 205.684 314.961 207.791 cv
312.854 209.897 311.801 212.44 311.801 215.42 cv
311.801 218.399 312.854 220.942 314.961 223.049 cv
317.068 225.155 319.611 226.209 322.59 226.209 cv
325.569 226.209 328.112 225.155 330.219 223.049 cv
332.326 220.942 333.379 218.399 333.379 215.42 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
10 ml
298.854 32.7265 mo
298.854 19.7798 li
@
1.43853 lw
4 ml
316.476 174.781 mo
316.476 171.802 315.423 169.259 313.316 167.152 cv
311.21 165.046 308.667 163.992 305.687 163.992 cv
302.708 163.992 300.165 165.046 298.058 167.152 cv
295.952 169.259 294.898 171.802 294.898 174.781 cv
294.898 177.761 295.952 180.303 298.058 182.41 cv
300.165 184.517 302.708 185.57 305.687 185.57 cv
308.667 185.57 311.21 184.517 313.316 182.41 cv
315.423 180.303 316.476 177.761 316.476 174.781 cv
cp
@
10 ml
286.267 204.271 mo
301.422 189.677 li
@
304.529 186.685 mo
302.379 192.748 li
301.422 189.677 li
298.387 188.605 li
304.529 186.685 li
cp
f
304.529 186.685 mo
302.379 192.748 li
301.422 189.677 li
298.387 188.605 li
304.529 186.685 li
cp
@
322.23 204.271 mo
309.614 190.008 li
@
306.752 186.771 mo
312.722 189.181 li
309.614 190.008 li
308.413 192.993 li
306.752 186.771 li
cp
f
306.752 186.771 mo
312.722 189.181 li
309.614 190.008 li
308.413 192.993 li
306.752 186.771 li
cp
@
.719264 lw
286.627 204.631 mo
265.128 188.663 li
@
262.1 186.412 mo
267.638 187.39 li
265.128 188.663 li
264.639 191.432 li
262.1 186.412 li
cp
f
262.1 186.412 mo
267.638 187.39 li
265.128 188.663 li
264.639 191.432 li
262.1 186.412 li
cp
@
288.065 205.35 mo
338.414 187.462 li
@
341.974 186.196 mo
338.069 190.26 li
338.414 187.462 li
336.385 185.513 li
341.974 186.196 li
cp
f
341.974 186.196 mo
338.069 190.26 li
338.414 187.462 li
336.385 185.513 li
341.974 186.196 li
cp
@
322.59 204.631 mo
339.37 189.044 li
@
342.14 186.476 mo
340.162 191.749 li
339.37 189.044 li
336.738 188.059 li
342.14 186.476 li
cp
f
342.14 186.476 mo
340.162 191.749 li
339.37 189.044 li
336.738 188.059 li
342.14 186.476 li
cp
@
322.59 204.631 mo
265.833 187.268 li
@
262.222 186.167 mo
267.775 185.232 li
265.833 187.268 li
266.3 190.044 li
262.222 186.167 li
cp
f
262.222 186.167 mo
267.775 185.232 li
265.833 187.268 li
266.3 190.044 li
262.222 186.167 li
cp
@
1.43853 lw
4 ml
325.107 138.818 mo
325.107 135.839 324.054 133.296 321.947 131.189 cv
319.841 129.082 317.298 128.029 314.318 128.029 cv
311.339 128.029 308.796 129.082 306.69 131.189 cv
304.583 133.296 303.529 135.839 303.53 138.818 cv
303.529 141.797 304.583 144.34 306.69 146.447 cv
308.796 148.554 311.339 149.607 314.318 149.607 cv
317.298 149.607 319.841 148.554 321.947 146.447 cv
324.054 144.34 325.107 141.797 325.107 138.818 cv
cp
@
298.495 138.818 mo
298.495 135.839 297.441 133.296 295.335 131.189 cv
293.228 129.082 290.685 128.029 287.706 128.029 cv
284.726 128.029 282.183 129.082 280.077 131.189 cv
277.97 133.296 276.917 135.839 276.917 138.818 cv
276.917 141.797 277.97 144.34 280.077 146.447 cv
282.183 148.554 284.726 149.607 287.706 149.607 cv
290.685 149.607 293.228 148.554 295.335 146.447 cv
297.441 144.34 298.495 141.797 298.495 138.818 cv
cp
@
10 ml
305.687 163.992 mo
311.269 154.685 li
@
313.491 150.988 mo
312.995 157.404 li
311.269 154.685 li
308.061 154.44 li
313.491 150.988 li
cp
f
313.491 150.988 mo
312.995 157.404 li
311.269 154.685 li
308.061 154.44 li
313.491 150.988 li
cp
@
305.687 163.992 mo
292.331 153.304 li
@
288.964 150.614 mo
295.251 151.959 li
292.331 153.304 li
291.654 156.454 li
288.964 150.614 li
cp
f
288.964 150.614 mo
295.251 151.959 li
292.331 153.304 li
291.654 156.454 li
288.964 150.614 li
cp
@
314.318 128.029 mo
318.979 113.529 li
@
320.303 109.422 mo
321.281 115.78 li
318.979 113.529 li
315.8 114.018 li
320.303 109.422 li
cp
f
320.303 109.422 mo
321.281 115.78 li
318.979 113.529 li
315.8 114.018 li
320.303 109.422 li
cp
@
287.706 128.029 mo
286.692 113.802 li
@
286.382 109.494 mo
289.662 115.025 li
286.692 113.802 li
283.922 115.435 li
286.382 109.494 li
cp
f
286.382 109.494 mo
289.662 115.025 li
286.692 113.802 li
283.922 115.435 li
286.382 109.494 li
cp
@
.719264 lw
261.453 164.352 mo
282.728 112.486 li
@
284.167 108.99 mo
284.584 114.608 li
282.728 112.486 li
279.923 112.694 li
284.167 108.99 li
cp
f
284.167 108.99 mo
284.584 114.608 li
282.728 112.486 li
279.923 112.694 li
284.167 108.99 li
cp
@
342.729 164.352 mo
322.799 112.522 li
@
321.439 108.997 mo
325.597 112.795 li
322.799 112.522 li
320.9 114.6 li
321.439 108.997 li
cp
f
321.439 108.997 mo
325.597 112.795 li
322.799 112.522 li
320.9 114.6 li
321.439 108.997 li
cp
@
2.15779 lw
103.934 82.7154 mo
132.632 82.7154 li
@
137.487 82.7154 mo
131.014 85.9521 li
132.632 82.7154 li
131.014 79.4787 li
137.487 82.7154 li
cp
f
137.487 82.7154 mo
131.014 85.9521 li
132.632 82.7154 li
131.014 79.4787 li
137.487 82.7154 li
cp
@
345.606 82.7154 mo
374.305 82.7154 li
@
379.16 82.7154 mo
372.687 85.9521 li
374.305 82.7154 li
372.687 79.4787 li
379.16 82.7154 li
cp
f
379.16 82.7154 mo
372.687 85.9521 li
374.305 82.7154 li
372.687 79.4787 li
379.16 82.7154 li
cp
@
.719264 lw
4 ml
404.227 160.756 mo
424.366 160.756 li
425.558 160.756 426.575 161.177 427.417 162.02 cv
428.26 162.862 428.681 163.879 428.681 165.071 cv
428.681 185.211 li
428.681 186.402 428.26 187.419 427.417 188.262 cv
426.575 189.105 425.558 189.526 424.366 189.526 cv
404.227 189.526 li
403.035 189.526 402.018 189.105 401.175 188.262 cv
400.332 187.419 399.911 186.402 399.911 185.211 cv
399.911 165.071 li
399.911 163.879 400.332 162.862 401.175 162.02 cv
402.018 161.177 403.035 160.756 404.227 160.756 cv
cp
@
407.823 201.034 mo
465.364 201.034 li
466.556 201.034 467.573 201.456 468.416 202.298 cv
469.258 203.141 469.68 204.158 469.68 205.35 cv
469.68 225.489 li
469.68 226.681 469.258 227.698 468.416 228.541 cv
467.573 229.384 466.556 229.805 465.364 229.805 cv
407.823 229.805 li
406.631 229.805 405.614 229.384 404.771 228.541 cv
403.929 227.698 403.507 226.681 403.507 225.489 cv
403.507 205.35 li
403.507 204.158 403.929 203.141 404.771 202.298 cv
405.614 201.456 406.631 201.034 407.823 201.034 cv
cp
@
417.533 253.541 mo
417.533 250.561 416.48 248.018 414.373 245.912 cv
412.266 243.805 409.723 242.752 406.744 242.752 cv
403.765 242.752 401.222 243.805 399.115 245.912 cv
397.008 248.018 395.955 250.561 395.955 253.541 cv
395.955 256.52 397.008 259.063 399.115 261.17 cv
401.222 263.276 403.765 264.33 406.744 264.33 cv
409.723 264.33 412.266 263.276 414.373 261.17 cv
416.48 259.063 417.533 256.52 417.533 253.541 cv
cp
@
447.382 253.541 mo
447.382 250.661 446.364 248.202 444.328 246.166 cv
442.291 244.13 439.833 243.111 436.953 243.111 cv
434.073 243.111 431.615 244.13 429.578 246.166 cv
427.542 248.202 426.524 250.661 426.524 253.541 cv
426.524 256.421 427.542 258.879 429.578 260.915 cv
431.615 262.952 434.073 263.97 436.953 263.97 cv
439.833 263.97 442.291 262.952 444.328 260.915 cv
446.364 258.879 447.382 256.421 447.382 253.541 cv
cp
@
429.041 215.42 mo
429.041 212.44 427.988 209.897 425.881 207.791 cv
423.774 205.684 421.231 204.631 418.252 204.631 cv
415.273 204.631 412.73 205.684 410.623 207.791 cv
408.516 209.897 407.463 212.44 407.463 215.42 cv
407.463 218.399 408.516 220.942 410.623 223.049 cv
412.73 225.155 415.273 226.209 418.252 226.209 cv
421.231 226.209 423.774 225.155 425.881 223.049 cv
427.988 220.942 429.041 218.399 429.041 215.42 cv
cp
@
485.863 175.141 mo
485.863 172.162 484.81 169.619 482.703 167.512 cv
480.596 165.405 478.053 164.352 475.074 164.352 cv
472.095 164.352 469.552 165.405 467.445 167.512 cv
465.338 169.619 464.285 172.162 464.285 175.141 cv
464.285 178.12 465.338 180.663 467.445 182.77 cv
469.552 184.876 472.095 185.93 475.074 185.93 cv
478.053 185.93 480.596 184.876 482.703 182.77 cv
484.81 180.663 485.863 178.12 485.863 175.141 cv
cp
@
479.39 253.541 mo
479.39 250.561 478.336 248.018 476.23 245.912 cv
474.123 243.805 471.58 242.752 468.601 242.752 cv
465.621 242.752 463.078 243.805 460.972 245.912 cv
458.865 248.018 457.812 250.561 457.812 253.541 cv
457.812 256.52 458.865 259.063 460.972 261.17 cv
463.078 263.276 465.621 264.33 468.601 264.33 cv
471.58 264.33 474.123 263.276 476.23 261.17 cv
478.336 259.063 479.39 256.52 479.39 253.541 cv
cp
@
10 ml
406.744 242.752 mo
415.634 229.97 li
@
417.792 226.87 mo
416.986 232.437 li
415.634 229.97 li
412.85 229.568 li
417.792 226.87 li
cp
f
417.792 226.87 mo
416.986 232.437 li
415.634 229.97 li
412.85 229.568 li
417.792 226.87 li
cp
@
468.601 242.752 mo
429.624 225.209 li
@
426.178 223.662 mo
431.803 223.432 li
429.624 225.209 li
429.739 228.021 li
426.178 223.662 li
cp
f
426.178 223.662 mo
431.803 223.432 li
429.624 225.209 li
429.739 228.021 li
426.178 223.662 li
cp
@
418.252 86.6713 mo
417.533 86.6713 li
417.533 76.8678 li
@
417.533 73.0916 mo
420.05 78.1265 li
417.533 76.8678 li
415.015 78.1265 li
417.533 73.0916 li
cp
f
417.533 73.0916 mo
420.05 78.1265 li
417.533 76.8678 li
415.015 78.1265 li
417.533 73.0916 li
cp
@
429.041 97.4603 mo
429.041 100.44 427.988 102.983 425.881 105.089 cv
423.774 107.196 421.231 108.249 418.252 108.249 cv
415.273 108.249 412.73 107.196 410.623 105.089 cv
408.516 102.983 407.463 100.44 407.463 97.4603 cv
407.463 94.481 408.516 91.938 410.623 89.8313 cv
412.73 87.7247 415.273 86.6713 418.252 86.6713 cv
421.231 86.6713 423.774 87.7247 425.881 89.8313 cv
427.988 91.938 429.041 94.481 429.041 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
429.041 97.4603 mo
429.041 100.44 427.988 102.983 425.881 105.089 cv
423.774 107.196 421.231 108.249 418.252 108.249 cv
415.273 108.249 412.73 107.196 410.623 105.089 cv
408.516 102.983 407.463 100.44 407.463 97.4603 cv
407.463 94.481 408.516 91.938 410.623 89.8313 cv
412.73 87.7247 415.273 86.6713 418.252 86.6713 cv
421.231 86.6713 423.774 87.7247 425.881 89.8313 cv
427.988 91.938 429.041 94.481 429.041 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
420.913 101.776 mo
414.872 101.776 li
419.187 97.4603 li
414.872 93.1447 li
420.913 93.1447 li
@
4 ml
390.201 175.141 mo
390.201 172.162 389.147 169.619 387.041 167.512 cv
384.934 165.405 382.391 164.352 379.412 164.352 cv
376.433 164.352 373.89 165.405 371.783 167.512 cv
369.676 169.619 368.623 172.162 368.623 175.141 cv
368.623 178.12 369.676 180.663 371.783 182.77 cv
373.89 184.876 376.433 185.93 379.412 185.93 cv
382.391 185.93 384.934 184.876 387.041 182.77 cv
389.147 180.663 390.201 178.12 390.201 175.141 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
10 ml
452.777 86.6713 mo
452.058 86.6713 li
452.058 76.8678 li
@
452.058 73.0916 mo
454.575 78.1265 li
452.058 76.8678 li
449.54 78.1265 li
452.058 73.0916 li
cp
f
452.058 73.0916 mo
454.575 78.1265 li
452.058 76.8678 li
449.54 78.1265 li
452.058 73.0916 li
cp
@
463.566 97.4603 mo
463.566 100.44 462.512 102.983 460.406 105.089 cv
458.299 107.196 455.756 108.249 452.777 108.249 cv
449.798 108.249 447.255 107.196 445.148 105.089 cv
443.041 102.983 441.988 100.44 441.988 97.4603 cv
441.988 94.481 443.041 91.938 445.148 89.8313 cv
447.255 87.7247 449.798 86.6713 452.777 86.6713 cv
455.756 86.6713 458.299 87.7247 460.406 89.8313 cv
462.512 91.938 463.566 94.481 463.566 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
463.566 97.4603 mo
463.566 100.44 462.512 102.983 460.406 105.089 cv
458.299 107.196 455.756 108.249 452.777 108.249 cv
449.798 108.249 447.255 107.196 445.148 105.089 cv
443.041 102.983 441.988 100.44 441.988 97.4603 cv
441.988 94.481 443.041 91.938 445.148 89.8313 cv
447.255 87.7247 449.798 86.6713 452.777 86.6713 cv
455.756 86.6713 458.299 87.7247 460.406 89.8313 cv
462.512 91.938 463.566 94.481 463.566 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
455.438 101.776 mo
449.396 101.776 li
453.712 97.4603 li
449.396 93.1447 li
455.438 93.1447 li
@
468.601 242.752 mo
456.977 230.28 li
@
454.402 227.518 mo
459.675 229.481 li
456.977 230.28 li
455.992 232.919 li
454.402 227.518 li
cp
f
454.402 227.518 mo
459.675 229.481 li
456.977 230.28 li
455.992 232.919 li
454.402 227.518 li
cp
@
406.744 242.752 mo
441.808 226.022 li
@
445.217 224.396 mo
441.758 228.834 li
441.808 226.022 li
439.593 224.295 li
445.217 224.396 li
cp
f
445.217 224.396 mo
441.758 228.834 li
441.808 226.022 li
439.593 224.295 li
445.217 224.396 li
cp
@
436.953 243.471 mo
450.583 230.129 li
@
453.28 227.489 mo
451.446 232.811 li
450.583 230.129 li
447.922 229.215 li
453.28 227.489 li
cp
f
453.28 227.489 mo
451.446 232.811 li
450.583 230.129 li
447.922 229.215 li
453.28 227.489 li
cp
@
436.953 243.471 mo
421.618 229.316 li
@
418.842 226.755 mo
424.251 228.316 li
421.618 229.316 li
420.834 232.02 li
418.842 226.755 li
cp
f
418.842 226.755 mo
424.251 228.316 li
421.618 229.316 li
420.834 232.02 li
418.842 226.755 li
cp
@
4 ml
465.004 215.42 mo
465.004 212.44 463.951 209.897 461.844 207.791 cv
459.738 205.684 457.195 204.631 454.215 204.631 cv
451.236 204.631 448.693 205.684 446.586 207.791 cv
444.48 209.897 443.426 212.44 443.426 215.42 cv
443.426 218.399 444.48 220.942 446.586 223.049 cv
448.693 225.155 451.236 226.209 454.215 226.209 cv
457.195 226.209 459.738 225.155 461.844 223.049 cv
463.951 220.942 465.004 218.399 465.004 215.42 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
425.445 175.141 mo
425.445 172.162 424.391 169.619 422.285 167.512 cv
420.178 165.405 417.635 164.352 414.656 164.352 cv
411.677 164.352 409.134 165.405 407.027 167.512 cv
404.92 169.619 403.867 172.162 403.867 175.141 cv
403.867 178.12 404.92 180.663 407.027 182.77 cv
409.134 184.876 411.677 185.93 414.656 185.93 cv
417.635 185.93 420.178 184.876 422.285 182.77 cv
424.391 180.663 425.445 178.12 425.445 175.141 cv
cp
@
10 ml
418.252 204.631 mo
415.519 190.425 li
@
414.807 186.721 mo
418.231 191.188 li
415.519 190.425 li
413.289 192.137 li
414.807 186.721 li
cp
f
414.807 186.721 mo
418.231 191.188 li
415.519 190.425 li
413.289 192.137 li
414.807 186.721 li
cp
@
454.215 204.631 mo
418.799 187.886 li
@
415.382 186.275 mo
421.014 186.153 li
418.799 187.886 li
418.856 190.699 li
415.382 186.275 li
cp
f
415.382 186.275 mo
421.014 186.153 li
418.799 187.886 li
418.856 190.699 li
415.382 186.275 li
cp
@
418.252 204.631 mo
383.54 187.915 li
@
380.138 186.282 mo
385.763 186.196 li
383.54 187.915 li
383.584 190.734 li
380.138 186.282 li
cp
f
380.138 186.282 mo
385.763 186.196 li
383.54 187.915 li
383.584 190.734 li
380.138 186.282 li
cp
@
419.331 205.35 mo
470.751 187.44 li
@
474.312 186.196 mo
470.392 190.231 li
470.751 187.44 li
468.73 185.477 li
474.312 186.196 li
cp
f
474.312 186.196 mo
470.392 190.231 li
470.751 187.44 li
468.73 185.477 li
474.312 186.196 li
cp
@
454.215 204.631 mo
471.665 188.987 li
@
474.477 186.469 mo
472.406 191.705 li
471.665 188.987 li
469.047 187.951 li
474.477 186.469 li
cp
f
474.477 186.469 mo
472.406 191.705 li
471.665 188.987 li
469.047 187.951 li
474.477 186.469 li
cp
@
454.215 204.631 mo
383.857 187.037 li
@
380.189 186.124 mo
385.684 184.901 li
383.857 187.037 li
384.468 189.785 li
380.189 186.124 li
cp
f
380.189 186.124 mo
385.684 184.901 li
383.857 187.037 li
384.468 189.785 li
380.189 186.124 li
cp
@
4 ml
456.373 139.178 mo
456.373 136.198 455.32 133.655 453.213 131.549 cv
451.106 129.442 448.563 128.389 445.584 128.389 cv
442.605 128.389 440.062 129.442 437.955 131.549 cv
435.849 133.655 434.795 136.198 434.795 139.178 cv
434.795 142.157 435.849 144.7 437.955 146.807 cv
440.062 148.913 442.605 149.967 445.584 149.967 cv
448.563 149.967 451.106 148.913 453.213 146.807 cv
455.32 144.7 456.373 142.157 456.373 139.178 cv
cp
@
430.48 139.178 mo
430.48 136.198 429.426 133.655 427.32 131.549 cv
425.213 129.442 422.67 128.389 419.691 128.389 cv
416.711 128.389 414.168 129.442 412.062 131.549 cv
409.955 133.655 408.902 136.198 408.902 139.178 cv
408.902 142.157 409.955 144.7 412.062 146.807 cv
414.168 148.913 416.711 149.967 419.691 149.967 cv
422.67 149.967 425.213 148.913 427.32 146.807 cv
429.426 144.7 430.48 142.157 430.48 139.178 cv
cp
@
10 ml
414.656 164.352 mo
441.434 151.901 li
@
444.858 150.305 mo
441.355 154.714 li
441.434 151.901 li
439.226 150.146 li
444.858 150.305 li
cp
f
444.858 150.305 mo
441.355 154.714 li
441.434 151.901 li
439.226 150.146 li
444.858 150.305 li
cp
@
414.656 164.352 mo
418.18 154.289 li
@
419.425 150.729 mo
420.137 156.311 li
418.18 154.289 li
415.382 154.649 li
419.425 150.729 li
cp
f
419.425 150.729 mo
420.137 156.311 li
418.18 154.289 li
415.382 154.649 li
419.425 150.729 li
cp
@
445.584 128.389 mo
451.238 112.565 li
@
452.504 109.004 mo
453.187 114.593 li
451.238 112.565 li
448.44 112.903 li
452.504 109.004 li
cp
f
452.504 109.004 mo
453.187 114.593 li
451.238 112.565 li
448.44 112.903 li
452.504 109.004 li
cp
@
419.691 128.389 mo
418.576 112.817 li
@
418.31 109.055 mo
421.18 113.895 li
418.576 112.817 li
416.159 114.255 li
418.31 109.055 li
cp
f
418.31 109.055 mo
421.18 113.895 li
418.576 112.817 li
416.159 114.255 li
418.31 109.055 li
cp
@
379.412 164.352 mo
412.901 112.105 li
@
414.944 108.925 mo
414.347 114.521 li
412.901 112.105 li
410.103 111.81 li
414.944 108.925 li
cp
f
414.944 108.925 mo
414.347 114.521 li
412.901 112.105 li
410.103 111.81 li
414.944 108.925 li
cp
@
475.074 164.352 mo
454.467 112.507 li
@
453.072 108.997 mo
457.272 112.745 li
454.467 112.507 li
452.597 114.608 li
453.072 108.997 li
cp
f
453.072 108.997 mo
457.272 112.745 li
454.467 112.507 li
452.597 114.608 li
453.072 108.997 li
cp
@
437.672 56.4622 mo
437.672 43.5155 li
@
1.43853 lw
4 ml
456.014 174.781 mo
456.013 177.76 454.96 180.303 452.853 182.41 cv
450.747 184.517 448.204 185.57 445.225 185.57 cv
442.245 185.57 439.702 184.517 437.596 182.41 cv
435.489 180.303 434.436 177.76 434.436 174.781 cv
434.436 171.802 435.489 169.259 437.596 167.152 cv
439.702 165.046 442.245 163.992 445.225 163.992 cv
448.204 163.992 450.747 165.046 452.853 167.152 cv
454.96 169.259 456.013 171.802 456.014 174.781 cv
cp
@
10 ml
434.436 174.781 mo
456.014 174.781 li
@
445.225 163.992 mo
445.225 185.57 li
@
417.893 204.271 mo
440.334 188.915 li
@
443.894 186.476 mo
440.772 192.101 li
440.334 188.915 li
437.521 187.354 li
443.894 186.476 li
cp
f
443.894 186.476 mo
440.772 192.101 li
440.334 188.915 li
437.521 187.354 li
443.894 186.476 li
cp
@
453.856 204.271 mo
447.706 190.95 li
@
445.901 187.03 mo
450.921 191.051 li
447.706 190.95 li
445.699 193.461 li
445.901 187.03 li
cp
f
445.901 187.03 mo
450.921 191.051 li
447.706 190.95 li
445.699 193.461 li
445.901 187.03 li
cp
@
445.225 163.992 mo
424.51 152.484 li
@
420.734 150.391 mo
427.164 150.664 li
424.51 152.484 li
424.373 155.699 li
420.734 150.391 li
cp
f
420.734 150.391 mo
427.164 150.664 li
424.51 152.484 li
424.373 155.699 li
420.734 150.391 li
cp
@
445.225 163.992 mo
445.225 155.534 li
@
445.225 151.218 mo
448.102 156.972 li
445.225 155.534 li
442.348 156.972 li
445.225 151.218 li
cp
f
445.225 151.218 mo
448.102 156.972 li
445.225 155.534 li
442.348 156.972 li
445.225 151.218 li
cp
@
.719264 lw
4 ml
534.054 160.756 mo
584.402 160.756 li
585.594 160.756 586.611 161.177 587.454 162.02 cv
588.296 162.862 588.718 163.879 588.718 165.071 cv
588.718 185.211 li
588.718 186.402 588.296 187.419 587.454 188.262 cv
586.611 189.105 585.594 189.526 584.402 189.526 cv
534.054 189.526 li
532.862 189.526 531.845 189.105 531.002 188.262 cv
530.159 187.419 529.738 186.402 529.738 185.211 cv
529.738 165.071 li
529.738 163.879 530.159 162.862 531.002 162.02 cv
531.845 161.177 532.862 160.756 534.054 160.756 cv
cp
@
537.65 201.034 mo
593.033 201.034 li
594.225 201.034 595.242 201.456 596.085 202.298 cv
596.928 203.141 597.349 204.158 597.349 205.35 cv
597.349 225.489 li
597.349 226.681 596.928 227.698 596.085 228.541 cv
595.242 229.384 594.225 229.805 593.033 229.805 cv
537.65 229.805 li
536.458 229.805 535.441 229.384 534.598 228.541 cv
533.756 227.698 533.334 226.681 533.334 225.489 cv
533.334 205.35 li
533.334 204.158 533.756 203.141 534.598 202.298 cv
535.441 201.456 536.458 201.034 537.65 201.034 cv
cp
@
547 253.541 mo
547 250.561 545.947 248.018 543.84 245.912 cv
541.734 243.805 539.191 242.752 536.211 242.752 cv
533.232 242.752 530.689 243.805 528.583 245.912 cv
526.476 248.018 525.422 250.561 525.422 253.541 cv
525.422 256.52 526.476 259.063 528.583 261.17 cv
530.689 263.276 533.232 264.33 536.211 264.33 cv
539.191 264.33 541.734 263.276 543.84 261.17 cv
545.947 259.063 547 256.52 547 253.541 cv
cp
@
577.569 253.541 mo
577.569 250.661 576.551 248.202 574.514 246.166 cv
572.478 244.13 570.02 243.111 567.14 243.111 cv
564.26 243.111 561.802 244.13 559.765 246.166 cv
557.729 248.202 556.71 250.661 556.711 253.541 cv
556.71 256.421 557.729 258.879 559.765 260.915 cv
561.802 262.952 564.26 263.97 567.14 263.97 cv
570.02 263.97 572.478 262.952 574.514 260.915 cv
576.551 258.879 577.569 256.421 577.569 253.541 cv
cp
@
558.509 215.42 mo
558.509 212.44 557.455 209.897 555.349 207.791 cv
553.242 205.684 550.699 204.631 547.72 204.631 cv
544.74 204.631 542.197 205.684 540.091 207.791 cv
537.984 209.897 536.931 212.44 536.931 215.42 cv
536.931 218.399 537.984 220.942 540.091 223.049 cv
542.197 225.155 544.74 226.209 547.72 226.209 cv
550.699 226.209 553.242 225.155 555.349 223.049 cv
557.455 220.942 558.509 218.399 558.509 215.42 cv
cp
@
621.804 175.141 mo
621.804 172.162 620.75 169.619 618.644 167.512 cv
616.537 165.405 613.994 164.352 611.015 164.352 cv
608.036 164.352 605.493 165.405 603.386 167.512 cv
601.279 169.619 600.226 172.162 600.226 175.141 cv
600.226 178.12 601.279 180.663 603.386 182.77 cv
605.493 184.876 608.036 185.93 611.015 185.93 cv
613.994 185.93 616.537 184.876 618.644 182.77 cv
620.75 180.663 621.804 178.12 621.804 175.141 cv
cp
@
608.857 253.541 mo
608.857 250.561 607.804 248.018 605.697 245.912 cv
603.59 243.805 601.047 242.752 598.068 242.752 cv
595.089 242.752 592.546 243.805 590.439 245.912 cv
588.333 248.018 587.279 250.561 587.279 253.541 cv
587.279 256.52 588.333 259.063 590.439 261.17 cv
592.546 263.276 595.089 264.33 598.068 264.33 cv
601.047 264.33 603.59 263.276 605.697 261.17 cv
607.804 259.063 608.857 256.52 608.857 253.541 cv
cp
@
10 ml
536.211 242.752 mo
545.102 229.97 li
@
547.259 226.87 mo
546.454 232.437 li
545.102 229.97 li
542.318 229.568 li
547.259 226.87 li
cp
f
547.259 226.87 mo
546.454 232.437 li
545.102 229.97 li
542.318 229.568 li
547.259 226.87 li
cp
@
598.068 242.752 mo
559.796 225.238 li
@
556.365 223.67 mo
561.99 223.475 li
559.796 225.238 li
559.897 228.05 li
556.365 223.67 li
cp
f
556.365 223.67 mo
561.99 223.475 li
559.796 225.238 li
559.897 228.05 li
556.365 223.67 li
cp
@
547.72 86.6713 mo
547.72 76.8678 li
@
547.72 73.0916 mo
550.237 78.1265 li
547.72 76.8678 li
545.202 78.1265 li
547.72 73.0916 li
cp
f
547.72 73.0916 mo
550.237 78.1265 li
547.72 76.8678 li
545.202 78.1265 li
547.72 73.0916 li
cp
@
558.509 97.4603 mo
558.509 100.44 557.455 102.983 555.349 105.089 cv
553.242 107.196 550.699 108.249 547.72 108.249 cv
544.74 108.249 542.197 107.196 540.091 105.089 cv
537.984 102.983 536.931 100.44 536.931 97.4603 cv
536.931 94.481 537.984 91.938 540.091 89.8313 cv
542.197 87.7247 544.74 86.6713 547.72 86.6713 cv
550.699 86.6713 553.242 87.7247 555.349 89.8313 cv
557.455 91.938 558.509 94.481 558.509 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
558.509 97.4603 mo
558.509 100.44 557.455 102.983 555.349 105.089 cv
553.242 107.196 550.699 108.249 547.72 108.249 cv
544.74 108.249 542.197 107.196 540.091 105.089 cv
537.984 102.983 536.931 100.44 536.931 97.4603 cv
536.931 94.481 537.984 91.938 540.091 89.8313 cv
542.197 87.7247 544.74 86.6713 547.72 86.6713 cv
550.699 86.6713 553.242 87.7247 555.349 89.8313 cv
557.455 91.938 558.509 94.481 558.509 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
550.741 101.776 mo
544.699 101.776 li
549.014 97.4603 li
544.699 93.1447 li
550.741 93.1447 li
@
4 ml
520.388 175.141 mo
520.388 172.162 519.334 169.619 517.228 167.512 cv
515.121 165.405 512.578 164.352 509.599 164.352 cv
506.619 164.352 504.076 165.405 501.97 167.512 cv
499.863 169.619 498.81 172.162 498.81 175.141 cv
498.81 178.12 499.863 180.663 501.97 182.77 cv
504.076 184.876 506.619 185.93 509.599 185.93 cv
512.578 185.93 515.121 184.876 517.228 182.77 cv
519.334 180.663 520.388 178.12 520.388 175.141 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
10 ml
582.244 86.6713 mo
582.244 76.8678 li
@
582.244 73.0916 mo
584.762 78.1265 li
582.244 76.8678 li
579.727 78.1265 li
582.244 73.0916 li
cp
f
582.244 73.0916 mo
584.762 78.1265 li
582.244 76.8678 li
579.727 78.1265 li
582.244 73.0916 li
cp
@
593.033 97.4603 mo
593.033 100.44 591.98 102.983 589.873 105.089 cv
587.767 107.196 585.224 108.249 582.244 108.249 cv
579.265 108.249 576.722 107.196 574.615 105.089 cv
572.509 102.983 571.455 100.44 571.455 97.4603 cv
571.455 94.481 572.509 91.938 574.615 89.8313 cv
576.722 87.7247 579.265 86.6713 582.244 86.6713 cv
585.224 86.6713 587.767 87.7247 589.873 89.8313 cv
591.98 91.938 593.033 94.481 593.033 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
593.033 97.4603 mo
593.033 100.44 591.98 102.983 589.873 105.089 cv
587.767 107.196 585.224 108.249 582.244 108.249 cv
579.265 108.249 576.722 107.196 574.615 105.089 cv
572.509 102.983 571.455 100.44 571.455 97.4603 cv
571.455 94.481 572.509 91.938 574.615 89.8313 cv
576.722 87.7247 579.265 86.6713 582.244 86.6713 cv
585.224 86.6713 587.767 87.7247 589.873 89.8313 cv
591.98 91.938 593.033 94.481 593.033 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
585.265 101.776 mo
579.223 101.776 li
583.539 97.4603 li
579.223 93.1447 li
585.265 93.1447 li
@
597.176 242.876 mo
594.274 239.682 li
595.338 238.715 li
598.241 241.908 li
591.371 236.489 mo
588.469 233.295 li
589.533 232.327 li
592.436 235.521 li
1 /0 /CSD get_res sepcs
1 sep
f
584.402 227.755 mo
590.408 230.078 li
587.308 230.949 li
586.15 233.948 li
584.402 227.755 li
cp
f
1.43853 lw
584.402 227.755 mo
590.408 230.078 li
587.308 230.949 li
586.15 233.948 li
584.402 227.755 li
cp
@
539.147 241.739 mo
543.065 239.93 li
543.668 241.236 li
539.75 243.045 li
546.983 238.122 mo
550.902 236.313 li
551.505 237.619 li
547.586 239.428 li
554.82 234.504 mo
558.738 232.696 li
559.341 234.002 li
555.423 235.811 li
562.657 230.887 mo
566.575 229.078 li
567.178 230.385 li
563.259 232.193 li
570.493 227.27 mo
571.168 226.958 li
571.771 228.264 li
571.096 228.576 li
f
575.39 225.806 mo
571.369 230.826 li
571.47 227.611 li
568.96 225.604 li
575.39 225.806 li
cp
f
575.39 225.806 mo
571.369 230.826 li
571.47 227.611 li
568.96 225.604 li
575.39 225.806 li
cp
@
566.272 242.603 mo
569.323 239.551 li
570.34 240.568 li
567.289 243.62 li
572.375 236.5 mo
575.426 233.448 li
576.444 234.465 li
573.392 237.517 li
578.478 230.396 mo
578.629 230.246 li
579.646 231.263 li
579.495 231.414 li
f
582.187 227.705 mo
580.151 233.811 li
579.137 230.754 li
576.08 229.74 li
582.187 227.705 li
cp
f
582.187 227.705 mo
580.151 233.811 li
579.137 230.754 li
576.08 229.74 li
582.187 227.705 li
cp
@
.719264 lw
567.14 243.471 mo
551.143 229.251 li
@
548.324 226.741 mo
553.754 228.208 li
551.143 229.251 li
550.41 231.97 li
548.324 226.741 li
cp
f
548.324 226.741 mo
553.754 228.208 li
551.143 229.251 li
550.41 231.97 li
548.324 226.741 li
cp
@
4 ml
554.912 175.141 mo
554.912 172.162 553.859 169.619 551.752 167.512 cv
549.646 165.405 547.103 164.352 544.123 164.352 cv
541.144 164.352 538.601 165.405 536.494 167.512 cv
534.388 169.619 533.334 172.162 533.334 175.141 cv
533.334 178.12 534.388 180.663 536.494 182.77 cv
538.601 184.876 541.144 185.93 544.123 185.93 cv
547.103 185.93 549.646 184.876 551.752 182.77 cv
553.859 180.663 554.912 178.12 554.912 175.141 cv
cp
@
10 ml
547.72 204.631 mo
544.987 190.425 li
@
544.274 186.721 mo
547.698 191.188 li
544.987 190.425 li
542.757 192.137 li
544.274 186.721 li
cp
f
544.274 186.721 mo
547.698 191.188 li
544.987 190.425 li
542.757 192.137 li
544.274 186.721 li
cp
@
583.017 204.821 mo
579.112 202.985 li
579.724 201.683 li
583.629 203.519 li
575.207 201.148 mo
571.301 199.312 li
571.913 198.01 li
575.819 199.847 li
567.396 197.475 mo
563.49 195.639 li
564.103 194.337 li
568.008 196.174 li
559.585 193.802 mo
555.68 191.966 li
556.292 190.664 li
560.197 192.501 li
551.774 190.13 mo
548.816 188.738 li
549.428 187.437 li
552.387 188.828 li
f
545.217 186.253 mo
551.654 186.102 li
549.122 188.088 li
549.201 191.303 li
545.217 186.253 li
cp
f
1.43853 lw
545.217 186.253 mo
551.654 186.102 li
549.122 188.088 li
549.201 191.303 li
545.217 186.253 li
cp
@
.719264 lw
547.72 204.631 mo
513.713 187.944 li
@
510.318 186.282 mo
515.95 186.239 li
513.713 187.944 li
513.734 190.763 li
510.318 186.282 li
cp
f
510.318 186.282 mo
515.95 186.239 li
513.713 187.944 li
513.734 190.763 li
510.318 186.282 li
cp
@
549.158 205.35 mo
606.642 187.304 li
@
610.245 186.167 mo
606.196 190.08 li
606.642 187.304 li
604.693 185.275 li
610.245 186.167 li
cp
f
610.245 186.167 mo
606.196 190.08 li
606.642 187.304 li
604.693 185.275 li
610.245 186.167 li
cp
@
582.919 203.576 mo
586.486 201.147 li
587.296 202.337 li
583.728 204.765 li
590.054 198.719 mo
593.621 196.291 li
594.431 197.48 li
590.863 199.908 li
597.189 193.862 mo
600.756 191.434 li
601.566 192.623 li
597.998 195.052 li
604.324 189.006 mo
605.352 188.306 li
606.162 189.495 li
605.133 190.195 li
f
609.325 186.476 mo
606.189 192.094 li
605.757 188.9 li
602.952 187.332 li
609.325 186.476 li
cp
f
1.43853 lw
609.325 186.476 mo
606.189 192.094 li
605.757 188.9 li
602.952 187.332 li
609.325 186.476 li
cp
@
583.148 204.868 mo
578.962 203.817 li
579.313 202.422 li
583.498 203.473 li
574.777 202.767 mo
570.591 201.716 li
570.941 200.321 li
575.127 201.371 li
566.405 200.665 mo
562.22 199.614 li
562.57 198.219 li
566.756 199.27 li
558.034 198.564 mo
553.848 197.513 li
554.198 196.118 li
558.384 197.168 li
549.662 196.462 mo
545.477 195.411 li
545.827 194.016 li
550.013 195.067 li
541.291 194.361 mo
537.105 193.31 li
537.456 191.915 li
541.641 192.965 li
532.919 192.259 mo
528.734 191.209 li
529.084 189.813 li
533.27 190.864 li
524.548 190.158 mo
520.362 189.107 li
520.713 187.712 li
524.898 188.763 li
516.177 188.056 mo
514.811 187.714 li
515.161 186.318 li
516.527 186.661 li
f
510.8 185.959 mo
517.079 184.57 li
514.986 187.016 li
515.677 190.152 li
510.8 185.959 li
cp
f
510.8 185.959 mo
517.079 184.57 li
514.986 187.016 li
515.677 190.152 li
510.8 185.959 li
cp
@
.719264 lw
4 ml
586.56 139.178 mo
586.56 136.198 585.507 133.655 583.4 131.549 cv
581.293 129.442 578.75 128.389 575.771 128.389 cv
572.792 128.389 570.249 129.442 568.142 131.549 cv
566.035 133.655 564.982 136.198 564.982 139.178 cv
564.982 142.157 566.035 144.7 568.142 146.807 cv
570.249 148.913 572.792 149.967 575.771 149.967 cv
578.75 149.967 581.293 148.913 583.4 146.807 cv
585.507 144.7 586.56 142.157 586.56 139.178 cv
cp
@
559.947 139.178 mo
559.947 136.198 558.894 133.655 556.787 131.549 cv
554.68 129.442 552.138 128.389 549.158 128.389 cv
546.179 128.389 543.636 129.442 541.529 131.549 cv
539.423 133.655 538.369 136.198 538.369 139.178 cv
538.369 142.157 539.423 144.7 541.529 146.807 cv
543.636 148.913 546.179 149.967 549.158 149.967 cv
552.138 149.967 554.68 148.913 556.787 146.807 cv
558.894 144.7 559.947 142.157 559.947 139.178 cv
cp
@
10 ml
544.123 164.352 mo
571.599 151.865 li
@
575.037 150.297 mo
571.499 154.678 li
571.599 151.865 li
569.413 150.089 li
575.037 150.297 li
cp
f
575.037 150.297 mo
571.499 154.678 li
571.599 151.865 li
569.413 150.089 li
575.037 150.297 li
cp
@
544.123 164.352 mo
547.648 154.289 li
@
548.892 150.729 mo
549.604 156.311 li
547.648 154.289 li
544.85 154.649 li
548.892 150.729 li
cp
f
548.892 150.729 mo
549.604 156.311 li
547.648 154.289 li
544.85 154.649 li
548.892 150.729 li
cp
@
575.771 128.389 mo
580.842 112.608 li
@
582 109.012 mo
582.856 114.579 li
580.842 112.608 li
578.058 113.04 li
582 109.012 li
cp
f
582 109.012 mo
582.856 114.579 li
580.842 112.608 li
578.058 113.04 li
582 109.012 li
cp
@
549.158 128.389 mo
548.043 112.817 li
@
547.777 109.055 mo
550.647 113.895 li
548.043 112.817 li
545.627 114.255 li
547.777 109.055 li
cp
f
547.777 109.055 mo
550.647 113.895 li
548.043 112.817 li
545.627 114.255 li
547.777 109.055 li
cp
@
509.599 164.352 mo
543.088 112.105 li
@
545.13 108.925 mo
544.533 114.521 li
543.088 112.105 li
540.29 111.81 li
545.13 108.925 li
cp
f
545.13 108.925 mo
544.533 114.521 li
543.088 112.105 li
540.29 111.81 li
545.13 108.925 li
cp
@
611.015 164.352 mo
584.337 112.327 li
@
582.611 108.961 mo
587.15 112.299 li
584.337 112.327 li
582.669 114.593 li
582.611 108.961 li
cp
f
582.611 108.961 mo
587.15 112.299 li
584.337 112.327 li
582.669 114.593 li
582.611 108.961 li
cp
@
563.903 56.4622 mo
563.903 43.5155 li
@
547.72 204.631 mo
571.268 188.519 li
@
574.39 186.383 mo
571.657 191.303 li
571.268 188.519 li
568.809 187.153 li
574.39 186.383 li
cp
f
574.39 186.383 mo
571.657 191.303 li
571.268 188.519 li
568.809 187.153 li
574.39 186.383 li
cp
@
583.035 204.583 mo
581.165 200.693 li
582.462 200.07 li
584.331 203.959 li
579.296 196.803 mo
577.426 192.914 li
578.723 192.291 li
580.592 196.18 li
f
575.39 187.023 mo
580.475 190.957 li
577.26 190.907 li
575.289 193.453 li
575.39 187.023 li
cp
f
1.43853 lw
575.39 187.023 mo
580.475 190.957 li
577.26 190.907 li
575.289 193.453 li
575.39 187.023 li
cp
@
.719264 lw
575.052 164.352 mo
553.165 152.189 li
@
549.863 150.355 mo
555.488 150.6 li
553.165 152.189 li
553.042 155.001 li
549.863 150.355 li
cp
f
549.863 150.355 mo
555.488 150.6 li
553.165 152.189 li
553.042 155.001 li
549.863 150.355 li
cp
@
575.052 164.352 mo
575.541 154.541 li
@
575.728 150.772 mo
577.994 155.922 li
575.541 154.541 li
572.966 155.67 li
575.728 150.772 li
cp
f
575.728 150.772 mo
577.994 155.922 li
575.541 154.541 li
572.966 155.67 li
575.728 150.772 li
cp
@
2.15779 lw
476.872 82.7154 mo
505.571 82.7154 li
@
510.426 82.7154 mo
503.952 85.9521 li
505.571 82.7154 li
503.952 79.4787 li
510.426 82.7154 li
cp
f
510.426 82.7154 mo
503.952 85.9521 li
505.571 82.7154 li
503.952 79.4787 li
510.426 82.7154 li
cp
@
.719264 lw
4 ml
585.841 175.141 mo
585.841 172.162 584.787 169.619 582.681 167.512 cv
580.574 165.405 578.031 164.352 575.052 164.352 cv
572.072 164.352 569.529 165.405 567.423 167.512 cv
565.316 169.619 564.263 172.162 564.263 175.141 cv
564.263 178.12 565.316 180.663 567.423 182.77 cv
569.529 184.876 572.072 185.93 575.052 185.93 cv
578.031 185.93 580.574 184.876 582.681 182.77 cv
584.787 180.663 585.841 178.12 585.841 175.141 cv
cp
@
590.577 223.359 mo
589.446 224.446 588.147 225.267 586.681 225.822 cv
586.171 224.477 li
587.454 223.991 588.59 223.273 589.58 222.322 cv
590.577 223.359 li
cp
582.174 226.56 mo
580.607 226.502 579.114 226.138 577.696 225.469 cv
578.309 224.168 li
579.55 224.753 580.857 225.071 582.228 225.123 cv
582.174 226.56 li
cp
573.991 222.693 mo
572.948 221.516 572.179 220.181 571.683 218.688 cv
573.048 218.234 li
573.482 219.541 574.155 220.709 575.068 221.739 cv
573.991 222.693 li
cp
571.128 214.194 mo
571.247 212.626 571.669 211.144 572.395 209.749 cv
573.671 210.413 li
573.036 211.633 572.666 212.93 572.563 214.302 cv
571.128 214.194 li
cp
575.322 206.148 mo
576.543 205.151 577.911 204.435 579.426 203.999 cv
579.823 205.382 li
578.498 205.763 577.301 206.39 576.233 207.262 cv
575.322 206.148 li
cp
583.911 203.626 mo
585.477 203.805 586.944 204.286 588.313 205.068 cv
587.599 206.317 li
586.402 205.632 585.118 205.212 583.748 205.055 cv
583.911 203.626 li
cp
591.8 208.141 mo
592.749 209.402 593.41 210.799 593.784 212.333 cv
592.387 212.674 li
592.06 211.332 591.481 210.109 590.65 209.006 cv
591.8 208.141 li
cp
594.112 215.06 mo
594.112 216.622 593.807 218.122 593.196 219.56 cv
591.872 218.998 li
592.406 217.74 592.674 216.427 592.674 215.06 cv
594.112 215.06 li
cp
f
575.452 206.726 mo
578.504 209.777 li
577.487 210.795 li
574.435 207.743 li
581.556 212.829 mo
584.607 215.881 li
583.59 216.898 li
580.538 213.846 li
587.659 218.932 mo
590.71 221.984 li
589.693 223.001 li
586.642 219.949 li
f
590.773 207.743 mo
587.721 210.795 li
586.704 209.777 li
589.756 206.726 li
584.67 213.846 mo
581.618 216.898 li
580.601 215.881 li
583.652 212.829 li
578.566 219.949 mo
575.515 223.001 li
574.498 221.984 li
577.549 218.932 li
f
10 ml
690.853 32.7265 mo
690.853 19.7798 li
@
4 ml
655.969 160.756 mo
706.317 160.756 li
707.509 160.756 708.526 161.177 709.369 162.02 cv
710.212 162.862 710.633 163.879 710.633 165.071 cv
710.633 185.211 li
710.633 186.402 710.212 187.419 709.369 188.262 cv
708.526 189.105 707.509 189.526 706.317 189.526 cv
655.969 189.526 li
654.777 189.526 653.76 189.105 652.917 188.262 cv
652.075 187.419 651.653 186.402 651.653 185.211 cv
651.653 165.071 li
651.653 163.879 652.075 162.862 652.917 162.02 cv
653.76 161.177 654.777 160.756 655.969 160.756 cv
cp
@
676.468 201.034 mo
696.607 201.034 li
697.799 201.034 698.816 201.456 699.659 202.298 cv
700.502 203.141 700.923 204.158 700.923 205.35 cv
700.923 225.489 li
700.923 226.681 700.502 227.698 699.659 228.541 cv
698.816 229.384 697.799 229.805 696.607 229.805 cv
676.468 229.805 li
675.276 229.805 674.259 229.384 673.416 228.541 cv
672.574 227.698 672.152 226.681 672.152 225.489 cv
672.152 205.35 li
672.152 204.158 672.574 203.141 673.416 202.298 cv
674.259 201.456 675.276 201.034 676.468 201.034 cv
cp
@
669.275 253.541 mo
669.275 250.561 668.222 248.018 666.115 245.912 cv
664.009 243.805 661.466 242.752 658.486 242.752 cv
655.507 242.752 652.964 243.805 650.857 245.912 cv
648.751 248.018 647.697 250.561 647.697 253.541 cv
647.697 256.52 648.751 259.063 650.857 261.17 cv
652.964 263.276 655.507 264.33 658.486 264.33 cv
661.466 264.33 664.009 263.276 666.115 261.17 cv
668.222 259.063 669.275 256.52 669.275 253.541 cv
cp
@
699.125 253.541 mo
699.125 250.661 698.107 248.202 696.07 246.166 cv
694.034 244.13 691.575 243.111 688.695 243.111 cv
685.815 243.111 683.357 244.13 681.321 246.166 cv
679.284 248.202 678.266 250.661 678.266 253.541 cv
678.266 256.421 679.284 258.879 681.321 260.915 cv
683.357 262.952 685.815 263.97 688.695 263.97 cv
691.575 263.97 694.034 262.952 696.07 260.915 cv
698.107 258.879 699.125 256.421 699.125 253.541 cv
cp
@
697.327 215.42 mo
697.327 212.44 696.273 209.897 694.167 207.791 cv
692.06 205.684 689.517 204.631 686.538 204.631 cv
683.558 204.631 681.015 205.684 678.909 207.791 cv
676.802 209.897 675.749 212.44 675.749 215.42 cv
675.749 218.399 676.802 220.942 678.909 223.049 cv
681.015 225.155 683.558 226.209 686.538 226.209 cv
689.517 226.209 692.06 225.155 694.167 223.049 cv
696.273 220.942 697.327 218.399 697.327 215.42 cv
cp
@
731.132 253.541 mo
731.132 250.561 730.079 248.018 727.972 245.912 cv
725.865 243.805 723.322 242.752 720.343 242.752 cv
717.364 242.752 714.821 243.805 712.714 245.912 cv
710.607 248.018 709.554 250.561 709.554 253.541 cv
709.554 256.52 710.607 259.063 712.714 261.17 cv
714.821 263.276 717.364 264.33 720.343 264.33 cv
723.322 264.33 725.865 263.276 727.972 261.17 cv
730.079 259.063 731.132 256.52 731.132 253.541 cv
cp
@
10 ml
658.486 242.752 mo
682.589 228.532 li
@
685.847 226.619 mo
682.79 231.344 li
682.589 228.532 li
680.23 227.007 li
685.847 226.619 li
cp
f
685.847 226.619 mo
682.79 231.344 li
682.589 228.532 li
680.23 227.007 li
685.847 226.619 li
cp
@
720.343 242.752 mo
695.543 228.489 li
@
692.27 226.611 mo
697.888 226.935 li
695.543 228.489 li
695.377 231.301 li
692.27 226.611 li
cp
f
692.27 226.611 mo
697.888 226.935 li
695.543 228.489 li
695.377 231.301 li
692.27 226.611 li
cp
@
669.995 86.6713 mo
669.995 76.8678 li
@
669.995 73.0916 mo
672.512 78.1265 li
669.995 76.8678 li
667.477 78.1265 li
669.995 73.0916 li
cp
f
669.995 73.0916 mo
672.512 78.1265 li
669.995 76.8678 li
667.477 78.1265 li
669.995 73.0916 li
cp
@
680.784 97.4603 mo
680.784 100.44 679.73 102.983 677.623 105.089 cv
675.517 107.196 672.974 108.249 669.995 108.249 cv
667.015 108.249 664.472 107.196 662.366 105.089 cv
660.259 102.983 659.206 100.44 659.206 97.4603 cv
659.206 94.481 660.259 91.938 662.366 89.8313 cv
664.472 87.7247 667.015 86.6713 669.995 86.6713 cv
672.974 86.6713 675.517 87.7247 677.623 89.8313 cv
679.73 91.938 680.784 94.481 680.784 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
680.784 97.4603 mo
680.784 100.44 679.73 102.983 677.623 105.089 cv
675.517 107.196 672.974 108.249 669.995 108.249 cv
667.015 108.249 664.472 107.196 662.366 105.089 cv
660.259 102.983 659.206 100.44 659.206 97.4603 cv
659.206 94.481 660.259 91.938 662.366 89.8313 cv
664.472 87.7247 667.015 86.6713 669.995 86.6713 cv
672.974 86.6713 675.517 87.7247 677.623 89.8313 cv
679.73 91.938 680.784 94.481 680.784 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
672.656 101.776 mo
666.614 101.776 li
670.93 97.4603 li
666.614 93.1447 li
672.656 93.1447 li
@
704.519 86.6713 mo
703.8 86.6713 li
703.8 76.8678 li
@
703.8 73.0916 mo
706.317 78.1265 li
703.8 76.8678 li
701.283 78.1265 li
703.8 73.0916 li
cp
f
703.8 73.0916 mo
706.317 78.1265 li
703.8 76.8678 li
701.283 78.1265 li
703.8 73.0916 li
cp
@
715.308 97.4603 mo
715.308 100.44 714.255 102.983 712.148 105.089 cv
710.042 107.196 707.499 108.249 704.519 108.249 cv
701.54 108.249 698.997 107.196 696.89 105.089 cv
694.784 102.983 693.73 100.44 693.73 97.4603 cv
693.73 94.481 694.784 91.938 696.89 89.8313 cv
698.997 87.7247 701.54 86.6713 704.519 86.6713 cv
707.499 86.6713 710.042 87.7247 712.148 89.8313 cv
714.255 91.938 715.308 94.481 715.308 97.4603 cv
cp
0 0 0 0 cmyk
f
4 ml
715.308 97.4603 mo
715.308 100.44 714.255 102.983 712.148 105.089 cv
710.042 107.196 707.499 108.249 704.519 108.249 cv
701.54 108.249 698.997 107.196 696.89 105.089 cv
694.784 102.983 693.73 100.44 693.73 97.4603 cv
693.73 94.481 694.784 91.938 696.89 89.8313 cv
698.997 87.7247 701.54 86.6713 704.519 86.6713 cv
707.499 86.6713 710.042 87.7247 712.148 89.8313 cv
714.255 91.938 715.308 94.481 715.308 97.4603 cv
cp
0 0 0 1 cmyk
@
10 ml
707.181 101.776 mo
701.139 101.776 li
705.454 97.4603 li
701.139 93.1447 li
707.181 93.1447 li
@
688.695 243.471 mo
687.106 230.754 li
@
686.638 227.007 mo
689.76 231.689 li
687.106 230.754 li
684.761 232.315 li
686.638 227.007 li
cp
f
686.638 227.007 mo
689.76 231.689 li
687.106 230.754 li
684.761 232.315 li
686.638 227.007 li
cp
@
4 ml
677.187 175.141 mo
677.187 172.162 676.134 169.619 674.027 167.512 cv
671.921 165.405 669.378 164.352 666.398 164.352 cv
663.419 164.352 660.876 165.405 658.769 167.512 cv
656.663 169.619 655.609 172.162 655.609 175.141 cv
655.609 178.12 656.663 180.663 658.769 182.77 cv
660.876 184.876 663.419 185.93 666.398 185.93 cv
669.378 185.93 671.921 184.876 674.027 182.77 cv
676.134 180.663 677.187 178.12 677.187 175.141 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
10 ml
686.538 204.631 mo
669.757 189.044 li
@
666.988 186.476 mo
672.39 188.059 li
669.757 189.044 li
668.966 191.749 li
666.988 186.476 li
cp
f
666.988 186.476 mo
672.39 188.059 li
669.757 189.044 li
668.966 191.749 li
666.988 186.476 li
cp
@
4 ml
708.116 139.178 mo
708.116 136.198 707.062 133.655 704.956 131.549 cv
702.849 129.442 700.306 128.389 697.327 128.389 cv
694.347 128.389 691.804 129.442 689.698 131.549 cv
687.591 133.655 686.538 136.198 686.538 139.178 cv
686.538 142.157 687.591 144.7 689.698 146.807 cv
691.804 148.913 694.347 149.967 697.327 149.967 cv
700.306 149.967 702.849 148.913 704.956 146.807 cv
707.062 144.7 708.116 142.157 708.116 139.178 cv
cp
@
682.222 139.178 mo
682.222 136.198 681.169 133.655 679.062 131.549 cv
676.955 129.442 674.412 128.389 671.433 128.389 cv
668.454 128.389 665.911 129.442 663.804 131.549 cv
661.698 133.655 660.644 136.198 660.644 139.178 cv
660.644 142.157 661.698 144.7 663.804 146.807 cv
665.911 148.913 668.454 149.967 671.433 149.967 cv
674.412 149.967 676.955 148.913 679.062 146.807 cv
681.169 144.7 682.222 142.157 682.222 139.178 cv
cp
@
10 ml
666.398 164.352 mo
693.177 151.901 li
@
696.6 150.305 mo
693.097 154.714 li
693.177 151.901 li
690.968 150.146 li
696.6 150.305 li
cp
f
696.6 150.305 mo
693.097 154.714 li
693.177 151.901 li
690.968 150.146 li
696.6 150.305 li
cp
@
666.398 164.352 mo
669.923 154.289 li
@
671.167 150.729 mo
671.879 156.311 li
669.923 154.289 li
667.125 154.649 li
671.167 150.729 li
cp
f
671.167 150.729 mo
671.879 156.311 li
669.923 154.289 li
667.125 154.649 li
671.167 150.729 li
cp
@
697.327 128.389 mo
702.98 112.565 li
@
704.246 109.004 mo
704.929 114.593 li
702.98 112.565 li
700.182 112.903 li
704.246 109.004 li
cp
f
704.246 109.004 mo
704.929 114.593 li
702.98 112.565 li
700.182 112.903 li
704.246 109.004 li
cp
@
671.433 128.389 mo
670.318 112.817 li
@
670.052 109.055 mo
672.922 113.895 li
670.318 112.817 li
667.902 114.255 li
670.052 109.055 li
cp
f
670.052 109.055 mo
672.922 113.895 li
670.318 112.817 li
667.902 114.255 li
670.052 109.055 li
cp
@
686.538 204.631 mo
695.039 189.9 li
@
696.924 186.627 mo
696.586 192.245 li
695.039 189.9 li
692.227 189.728 li
696.924 186.627 li
cp
f
696.924 186.627 mo
696.586 192.245 li
695.039 189.9 li
692.227 189.728 li
696.924 186.627 li
cp
@
697.327 164.352 mo
675.439 152.189 li
@
672.138 150.355 mo
677.763 150.6 li
675.439 152.189 li
675.317 155.001 li
672.138 150.355 li
cp
f
672.138 150.355 mo
677.763 150.6 li
675.439 152.189 li
675.317 155.001 li
672.138 150.355 li
cp
@
697.327 164.352 mo
697.327 154.548 li
@
697.327 150.772 mo
699.844 155.807 li
697.327 154.548 li
694.809 155.807 li
697.327 150.772 li
cp
f
697.327 150.772 mo
699.844 155.807 li
697.327 154.548 li
694.809 155.807 li
697.327 150.772 li
cp
@
4 ml
708.116 175.141 mo
708.116 172.162 707.062 169.619 704.956 167.512 cv
702.849 165.405 700.306 164.352 697.327 164.352 cv
694.347 164.352 691.804 165.405 689.698 167.512 cv
687.591 169.619 686.538 172.162 686.538 175.141 cv
686.538 178.12 687.591 180.663 689.698 182.77 cv
691.804 184.876 694.347 185.93 697.327 185.93 cv
700.306 185.93 702.849 184.876 704.956 182.77 cv
707.062 180.663 708.116 178.12 708.116 175.141 cv
cp
@
2.15779 lw
10 ml
608.138 82.7154 mo
636.837 82.7154 li
@
641.692 82.7154 mo
635.218 85.9521 li
636.837 82.7154 li
635.218 79.4787 li
641.692 82.7154 li
cp
f
641.692 82.7154 mo
635.218 85.9521 li
636.837 82.7154 li
635.218 79.4787 li
641.692 82.7154 li
cp
@
.719264 lw
74.0842 56.4622 mo
74.0842 43.5155 li
@
298.135 56.4622 mo
298.135 43.5155 li
@
691.573 56.4622 mo
691.573 43.5155 li
@
grestore
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: SQXXKW+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /SQXXKW+ def
/FontMatrix [0.001 0 0 -0.001 0 0 ] def
/FontBBox [-0.027 -0.206 0.633 0.683 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /g5A put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/g5A {444 0 -24 -441 426 206 setcachedevice
243 -186 mo
226 -275 173 -441 158 -441 cv
154 -441 li
100 -433 67 -427 47 -423 cv
37 -421 26 -419 15 -417 cv
15 -400 li
26 -403 35 -404 46 -404 cv
86 -404 104 -389 123 -340 cv
150 -272 205 -48 205 -8 cv
205 3 201 15 195 27 cv
187 40 142 99 124 118 cv
101 143 89 151 76 151 cv
50 151 50 123 15 123 cv
-7 123 -24 141 -24 163 cv
-24 189 -3 206 27 206 cv
84 206 191 91 295 -81 cv
378 -219 426 -329 426 -386 cv
426 -416 404 -441 374 -441 cv
351 -441 334 -426 334 -404 cv
334 -388 340 -378 360 -365 cv
379 -353 386 -347 386 -333 cv
386 -289 349 -217 264 -76 cv
243 -186 li
cp
false sop
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/SQXXKX+ /SQXXKW+ findfont ct_VMDictPut
/SQXXKX+*1 
[32{/.notdef}rp /g5A 223{/.notdef}rp]
SQXXKX+ nf
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
336.616 178.378 mo
( )sh
false sop
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: SQXXKY+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /SQXXKY+ def
/FontMatrix [0.001 0 0 -0.001 0 0 ] def
/FontBBox [0 -0.177 0.474 0.676 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /g9 put
dup 33 /g12 put
dup 34 /gA put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/g9 {333 0 48 -676 304 177 setcachedevice
304 161 mo
164 44 134 -69 134 -255 cv
134 -448 165 -541 304 -660 cv
295 -676 li
135 -581 48 -437 48 -252 cv
48 -82 134 87 292 177 cv
304 161 li
cp
false sop
f
}bind def
/g12 {500 0 111 -676 394 0 setcachedevice
394 0 mo
394 -15 li
319 -15 299 -33 299 -76 cv
299 -673 li
290 -676 li
111 -585 li
111 -571 li
138 -581 li
156 -588 173 -593 183 -593 cv
204 -593 213 -578 213 -544 cv
213 -95 li
213 -40 192 -19 118 -15 cv
118 0 li
394 0 li
cp
false sop
f
}bind def
/gA {333 0 29 -676 285 177 setcachedevice
29 -660 mo
174 -546 199 -431 199 -244 cv
199 -50 171 44 29 161 cv
38 177 li
197 80 285 -62 285 -247 cv
285 -417 194 -584 41 -676 cv
29 -660 li
cp
false sop
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/SQXXKZ+ /SQXXKY+ findfont ct_VMDictPut
/SQXXKZ+*1 
[32{/.notdef}rp /g9 /g12 /gA 221{/.notdef}rp]
SQXXKZ+ nf
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
341.246 173.343 mo
( )sh
343.696 173.343 mo
(!)sh
347.382 173.343 mo
(")sh
false sop
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: SQXXKY+ AddGlyphs
systemdict begin SQXXKZ+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g13 {500 0 29 -676 474 0 setcachedevice
474 -137 mo
460 -143 li
427 -87 406 -76 364 -76 cv
130 -76 li
295 -252 li
384 -346 423 -421 423 -500 cv
423 -599 351 -676 238 -676 cv
115 -676 51 -594 30 -477 cv
51 -472 li
91 -570 126 -602 198 -602 cv
283 -602 337 -552 337 -461 cv
337 -376 301 -300 207 -201 cv
29 -12 li
29 0 li
420 0 li
474 -137 li
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/SQXXKZ+*1 
[32{/.notdef}rp /g9 /g12 /gA /g13 220{/.notdef}rp]
SQXXKZ+ nf
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
341.246 181.255 mo
(#)sh
gsave
0 0 mo
743 0 li
743 302.81 li
0 302.81 li
cp
eclp
false sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Helvetica
Type42DictBegin
[<00010000000b000b000b000b637674208de93e9e000000bc0000036c6670
676de80497d30000042800000a1d676c79664db9546600005e4c00001340
6865616497cde50d00000e4800000036686865610a220fad00000e800000
0024686d747837741f4300000ea4000022546c6f6361009f747c000030f8
000022586d61787010ff0b2d00005350000000206e616d657dcc29c50000
53700000070c70726570bc836e3100005a7c000003cf6764697200000000
000000000000000005c0001005bd00280580001a042f001f0000ffd90000
ffda0000ffd9fe55ffe605c70010fe6dfff1033b000000b9000000b902fe
3f3c00c0008d009b00af000600a800c00028005e009800c9016a00b9015c
00b400d6011e002e0080000400b8004c00cc01ffffd1006600a400af0074
00c2009500b1000c0028006d0015004c008e0125ff7a000c0040004c0062
0084ffa200240038008600bd0039005e008e00edffa9ffb3004000520055
00aa00ab00c200cb012302b10413ffaeffe4000800510074008400aa00d1
ff4cffaf0012002c004200500051008400be012503daff680018003b0098
009c009f00a100c100ec018201b4ff68ff76ffd0ffe100020018001c0053
0053007d01b401e103af0486ff9cffeafffe001f0028002a005200600093
00a300aa00af00af00c001000145016b0174019301950240028202b40485
0517fefd00060029004700470048006f008800b400b900c400f200f901ef
02180310037403c5ff35fff3000b004b004c005200550065007600760087
0087008e00ab00bb0106013001430150017d0194019501d3022a02550258
0277027802e6034e035c037903d3047304b2058c0598060bfef5ffbbffc7
ffd50017001d005b0072007e009c00c200d000f400fa01030106011c0125
013b0142015e015e0180019b02b901a101b9025001c001d002aa01df01e3
01ef01fb0205020c0215022b0274029302ab02c202ce03690395039903df
03f5043e050205a105e5062507dbfe62fe89feceff3bffe1fff800030008
002100390042004e005f0061006f00700034007f008e00ad00ad00af00bd
00c400c500c900c900c900e3011c00ed00f800f901000112011a0132014d
014d014e014f01660169019e01ba01ba01be01e301ef01f6020002000209
02110217021c02530262026d028002d50280031b032a034a035a03af03af
03c803d603fb03fb04050413041504470449008c046d049a049a04a604a8
04b204cf0539053e054e055605800589058c036305d105d6067e068e06b2
06ef06f00728074c076f078c00b400c900c000c100000000000000000000
00000004012400af0032006e0063014401620096014301a10161008a0074
0064018801ef01700028ff5d037e0347023000aa00be007b0062009a007d
0089035c00a1ffd803aa00d70093006c0000008000a70442001d0597001d
00820030002a002a002a002a002a40292a292827262524232221201f1e1d
1c1b1a191817161514131211100d0c0b0a090807060504030201002c4523
466020b02660b004262348482d2c452346236120b02661b004262348482d
2c45234660b0206120b04660b004262348482d2c4523462361b0206020b0
2661b02061b004262348482d2c45234660b0406120b06660b00426234848
2d2c4523462361b0406020b02661b04061b004262348482d2c0110203c00
3c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed515823
20b04d44235920b09051582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b
2d2c2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c
2045b00325456164b050515845441b2121592d2c20b0032552582359212d
2c69b04061b0008b0c6423648bb8400062600c642364615c58b0036159b0
02602d2c45b0112bb0172344b0177ae5182d2c45b0112bb01723442d2c45
b0112bb017458cb0172344b0177ae5182d2cb002254661658a46b040608b
482d2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185
592d2c20b0032545b019236a4445b01a23444565234520b00325606a20b0
09234223688a6a606120b0005258b21a401a4523614459b0005058b21940
1945236144592d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b
2d2cb93b21e7830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845
441b2121592d2c0120b003252349b04060b0206320b000525823b0022538
23b002256538008a63381b212121212159012d2c456920b00943b0022660
b00325b005254961b0805358b21940194523616844b21a401a4523606a44
b209191a45652345604259b00943608a103a2d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d
2c764520b003254523616818236860442d2c7645b0032545236168231845
6860442d2c7645b0032545616823452361442d2c4569b014b0324b505821
b0205961442db8002b2c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db8002c2c2020456944b001602db8002d2cb8002c2a212d
b8002e2c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db8002f2c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800302c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80031
2c2020456944b001602020457d691844b001602db800322cb800312a2db8
00332c4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a
1b8a235920b0032653582321b801008a8a1b8a235920b0032653582321b8
01408a8a1b8a235920b80003265358b0032545b8018050582321b8018023
211bb003254523212321591b2159442db800342c4b535845441b2121592d
b800352c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db800362c2020456944b001602db800372cb800362a212db800382c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db800392c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db8003a2c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db8003b2c2020456944
b001602020457d691844b001602db8003c2cb8003b2a2db8003d2c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db8003e2c4b535845441b2121592db8003f2c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800402c20
20456944b001602db800412cb800402a212db800422c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800432c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db800442c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db800452c2020456944b00160202045
7d691844b001602db800462cb800452a2db800472c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db800482c4b535845441b2121592db800492c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db8004a2c2020456944b001
602db8004b2cb8004a2a212db8004c2c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db8004d2c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db8004e2c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db8004f2c2020456944b001602020457d691844b001
602db800502cb8004f2a2db800512c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
522c4b535845441b2121592db800532c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db800542c2020456944b001602db800552c
b800542a212db800562c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db800572c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db800582c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db800592c2020456944b001602020457d691844b001602db8005a2c
b800592a2db8005b2c4b20b003265358b0401bb000598a8a20b003265358
2321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a235920b003
2653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a23
5920b80003265358b0032545b8018050582321b8018023211bb003254523
212321591b2159442db8005c2c4b535845441b2121592d00000000010000
00000000d5411b0d5f0f3cf500110800000000005f4d8f0000000000d567
0beef865fc270b9108f9000000090001000100000000000100000629fe29
00000c01f865fced0b910001000000000000000000000000000008950512
0042000000000239000002390000023900ed02d700520473000004730040
071d0042055600590187009c02aa008e02aa0044031d004e04ac005c0239
00aa02aa0055023900af0239000004730040047300c40473004004730031
04730034047300420473004d0473004b0473004204730049023900e30239
00e304ac001c04ac005c04ac001c0473009c081f00e10556001e05560097
05c7005a05c700a5055600af04e300af0639006305c700a1023900c90400
00230556009c0473009c06aa009705c7009c06390050055600af06390050
05c700b40556006004e3002105c700aa05560034078d00250556002a0556
002a04e3002f023900800239ffbb0239002f03c100780473000002aa0026
04730052047300760400003b04730038047300480239001c0473003d0473
008401c7008401c7ffda0400008001c7008906aa0084047300840473003b
047300760473003c02aa00890400004202390017047300800400000b05c7
00120400000b040000150400003402acffd50214009002ac002a04ac0012
0556001e0556001e05c7005a055600af05c7009c0639005005c700aa0473
005204730052047300520473005204730052047300520400003b04730048
047300480473004804730048023900670239000802390000023900250473
00840473003b0473003b0473003b0473003b0473003b0473008004730080
0473008004730080047300500333006f04730068047300380473004b02cd
0095044cfff504e300c705e5001505e50012080000ed02aa008a02aa0052
0464005c080000100639004205b4002a0464005c0464005a0464005c0473
ffe1049cffb403f4006a05b400280696001c0464002f0231ff7902f6003b
02ec00310625005e071d004904e3005c04e300ba02aa00e804ac005c0464
ffef047300280464005c04e50071047300c2047300c2080000ed02390000
0556001e0556001e0639005008000049078d00470473fffb080000f102aa
004e02aa004e01c7008401c700aa0464005c03f40042040000150556002a
0156feaa05f4006002aa00b402aa00aa0400001c0400001c047300500239
009701c700aa02aa004e0800000e0556001e055600af0556001e055600af
055600af0239006b0239fff9023900200239000206390050063900500652
00690639005005c700aa05c700aa05c700aa023900bd02aa002a02aafff7
02aa001502aa001902aa00f702aa008402aa007902aaffff02aa00a102aa
002a0473ffe801c7ffd7055600600400004204e3002f0400003402140090
05c700210473003d0556002a04000015055600800473008004ac005c04ac
007402aa005702aa000b02aa000706ac005a06ac00a306ac004b04730000
063900630473003d023900c9055600600400004205c7005a0400003b05c7
005a0400003b047300380556001e047300520556001e047300520556001e
0473005205c7005a0400003b05c7005a0400003b05c700a5054800380556
00af04730048055600af04730048055600af04730048055600af04730048
055600af04730048063900630473003d063900630473003d063900630473
003d0473003d05c700a10473008405c700350473003e038f006903710044
03330059031f00650239003501c7ffdf063900c9038e00840400002301c7
ffa3055600320400fff10473009c021f00830473009c01c7000c0473009c
021a004e0473009c027b008905c7009c0473008405c7002a0473000a05c7
009c047300840473000e063900500473003b063900500473003b06390050
0473003b05c700b402aa008905c7004902aa001705c700b402aa00420556
006004000042055600600400004204e300210239001704e3002102e10017
04e30021028fffe205c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa0473008005c700aa04730080078d0025
05c700120556002a0400001504e3002f0400003404e3002f040000340556
00600400004204e30021023900170473004b0000fcfc0000fcfc0000fc9c
0000fc680000fc860000fc8a0000fd690000fcc40000fcf60000fc700000
fc9c0000fd5b0000fcea0000fd120000fc9105c70021063900630473003d
0473009c01c700890556009c0400008005c7009c0473008405c700b402aa
008901aaffdb023700e102aa005501c7ffda040000800239001c04730048
047300480400003a047300510000fd3c0000fc660000fc8a0239fffb0239
fffb05c7009c047300840000fcc4056d0024054c00980556009804270098
059c00250556009807f0000a0554004505c7009805c7009805560098057e
002506aa009805c700980639005005c700980556009805c7005004e3001d
0556002f06d800410556002505db009805360060078d009807a1009806aa
001d070900980536009805c700640800009805b7006a0473005604730048
046200870339008704d9001c04730050063d00170400003304ab008704ab
0087046200870498001b055400870473008704730048047300870473007d
04000048040000330400001706a800460400001404910087044e005c0639
00870657008704e3001b05c7008703ff00870414002f0639008704770050
05560098047300500427009803390087023900ba01c700870400002305c7
0050040000480239001d020300290800002506c3001b07e10098067c0087
01c7ffdd055600620639004e0473001b0556009804620087040000480617
001b0473001b0556002f0400001705c700980473008704730098031d0087
0000fd5b0000fd5b0000fd5b0000fd5b0000fc700000fd930000fd2a0000
fc8a0000fcfc0000fcfc0000fc860000fd690000fcc40000fcf60000fd93
0000fc9c0000fc9c0000fc8a0000fc8a0000fc680000fc860000fc660000
fc680000fc860000fc660000fc660000fd500000fc660000fd5b0000fc8a
0000fc8d0000fd2a000000000239001b0473008306aa008302aa008806aa
008302aa008902aa0088042b0052042b005302020087033afffd02390017
023900170400000a05c70011040000140473009c0473009d0473009c0400
008004b2003904b2003905c7005905c7002104890049055600af05560060
040000420498003906e600aa05950080060a0052021400b6037300b60239
00c3048c002b0400003b0134005102aa00c102aa00c20b06000e055600ed
029600ed02aa004e01c700aa02aa0055044cfff5042f00c1042f00c20565
00c1056500c202aa0055029600ed02aa0055080000f102d500a4011d0000
000000000000000000000000000000000000000000000000000000000239
000002390000023900000239000002390000023900000239000002390000
023900000000000000000000000000000000000000000000011d0000008f
000002aafff7037000b60473009c02aa005502aa0006044c0072044c0073
0556001e04e300ae04730048071c00500568003b0000fd5e0000fd5e0000
fd5e0000fd5e0000fcc90000fcd20000fd980000fccd0000fcef0000fce1
0000fcd90000fcec0000fc5e0000fd440000fd4a0000fccf0000fcd10000
fc860000fc910000fcc10000fcc10000fcc10000fcc20000fcc20000fc8a
01550061027b00610155006101550061046400320464002b03f4002d03f4
002f05b4011305b400280231006b0231fe830464ff330464ffef0464002b
0464002d08fa006f0816006f0556009c023900c9047200c906ab00c9078f
00c905560034078f003409c800340c010034078f00c90556002a078f002a
09c8002a0473009c05c7005a05c700a506aa009701c70084038e00840555
008405c700840400000b05c7000b078e000b0955000b05c700840400000b
05c7000b078e000b01c700890400003b0473003806aa008409e2007408c1
004f07db003807da006b05a7007102f7005808e7007106f0006b05a10053
0556001e047300520239001e0239ffff063900500473003b05c700aa0473
008005c700aa0473008005c700aa0473008005c700aa0473008005c700aa
047300800556001e047300520556001e0473005208000010071d00490639
00630473003d0556009c04000080063900500473003b063900500473003b
01c7ffbe09cd005408fc006f07fb00380639006305c7009c047300840556
001e0473005208000010071d00490639004204e3005c0556001e04730052
0556001e04730052055600af04730048055600af047300480239ff7101c7
ff350239fff801c7ffaa063900500473003b063900500473003b05c700b4
02aaffd605c700b402aa004f05c700aa0473008005c700aa0473008005c7
00a1047300840556001e04730052055600af04730048063900500473003b
063900500473003b063900500473003b063900500473003b0556002a0400
001502aa004e023900c90556001e04730052055600970473007605560097
04730076055600970473007605c7005a0400003b05c700a50473003805c7
00a50473003805c700a50473003805c700a50473003805c700a504730038
055600af04730048055600af04730048055600af04730048055600af0473
0048055600af0473004804e300af0239001c063900630473003d05c700a1
0473008405c700a10473008405c700a10473008405c700390473001b05c7
00a1047300840239ffec01c7ff9e02390027023900160556009c04000080
0556009c040000800556009c040000800473009c01c700890473009c01c7
ff9d0473009c01c7ffb50473009c01c7ffc006aa009706aa008406aa0097
06aa008406aa009706aa008405c7009c0473008405c7009c0473008405c7
009c0473008405c7009c04730084063900500473003b063900500473003b
063900500473003b063900500473003b055600af04730076055600af0473
007605c700b402aa008905c700b402aa008305c700b402aa004a05c700b4
02aa00180556006004000042055600600400004205560060040000420556
006004000042055600600400004204e300210239001704e3002102390017
04e300210239ffe204e300210239ffe705c700aa0473008005c700aa0473
008005c700aa0473008005c700aa0473008005c700aa0473008005560034
0400000b055600340400000b078d002505c70012078d002505c70012078d
002505c70012078d002505c70012078d002505c700120556002a0400000b
0556002a0400000b0556002a0400001504e3002f0400003404e3002f0400
003404e3002f04000034047300840239001005c70012040000150239001c
0556001e047300520556001e047300520556001e047300520556001e0473
ffcb0556001e047300520556001e047300520556001e047300520556001e
047300520556001e047300520556001e047300520556001e047300520556
001e04730052055600af04730048055600af04730048055600af04730048
055600af047300480556008c0473fff0055600af04730048055600af0473
0048055600af04730048023900ae02390099023900c701c7008406390050
0473003b063900500473003b063900500473003b063900500473ffd80639
00500473003b063900500473003b063900500473003b071c00500568003b
071c00500568003b071c00500568003b071c00500568003b071c00500568
003b05c700aa0473008005c700aa0473008006e600aa0595008006e600aa
0595008006e600aa0595008006e600aa0595008006e600aa059500800556
002a040000150556002a040000150556002a040000150556002a04000015
055600af04730048055600af04730048056d007505df0096048600520486
00870723000a05890017056d002404860043056d002404860043056d0075
0486005208d9001006dd0012054f0043040a003005df00960486008705df
009604860087065500500486005205df006004120037056d001004120019
056d001004120019056d00100412001905ac005e047a0069074800980600
008d08000010071d004906aa009706aa008405c700b402aa004c0222ffc5
0556001b05c700c504e300d505c70029055600c504e3004805c700b00639
0071023900ba055600b00556002f071d00be05c700b004e3006206390071
05c700b0055600c504e3005804e1002f0556002905c700500558003d06a8
007f063900640239000a0556002904e3005a04e300b40473001204e30068
04730077038d004a04e3003b04e5008f023900b0047300b00473002504e3
00b8047300420400007104e3006f04e300aa0473004c04e3006f0400003b
04e300b805c700770473000e05c7008f0610006a0239000a04e300b80239
009a0222000b0000fd19023900b0016c0088016c00880000fcfc0000fcfc
016c008802ca001a02b5001a03050088031200880222002e0222002f031e
00880362006f033300880362006f0735007f0625005e0639ffef01c70084
01c700aa047200ed06ac009c06ac00ed04730048047300480556001e0473
005204730052055600af04730048055600af04730048055600af04730048
0239fff00239ffdb01c70079063900500473003b063900500473003b0639
00500473003b055600600400004205c700aa047300800400000b06e600aa
05950080060200610473ffd605c7fff20473008406aa008403f0009c0460
009a03a6005a03e9000c02cf00020448005c06020061047300500655004e
0486004c0639005002aa001e07c6002407c6002408e6ffca0000f9200000
fa0b0000fa0b0000fa060000fa0606020061047300500655004e0486004c
0222002f02b5001a0473002504e3002f040000340473003b04d2008404dc
00380473007204bd003804d7003d0473008204d7008202220086078d0047
0387008802aa008604d2003c04b80032052b00320772003805600017043a
001705ce001c04c2008904b8008901a9008a01a9008a01c700aa01870078
02aa000802aa00c102aa003a0187007802aa000802aa00c102aa003a01a9
008a01a9008a02aa001e02aafff7023a0042023a004100e4ffed01550045
0155004401c4004402e400090200000b023a004e023a004f0256000e0256
000e025600240256002402aa00550256002e0256002e0256002e02000021
0200000600e300440256003a023a000902560024025600240256000e0256
000e02aa0078023a004f0000fccd0000fca20000fca20000fd6f0000fd6f
0000fc490000fc490000fb9e0000fca20000fc490000fccd0000fcc20000
fcc20000000002390000000000000000000000000000031d004e031d004e
06da00c107c60024023900e308e6009c07c60024071d00d00703001b0239
008002390080000000000000000000000000000000000000000000000000
067b003a023a00200239001a02390021023a002702390025023a00210239
00240256002e0155002b0256002e0155004701550022023a0042023a0020
023a006202390020023900180239001a02390021023a002702390025023a
0021023900240256002e0155002b0256002e0155004701550022063c0011
063900630473009c0473009c0556002a06ab002806000030075600110473
007207c8005806ac005a05c7005a0556005904e500710696001c06ab0034
06ab0028055600af04730076055600af0473007604e300020639005004c4
00a1024100230369001105c7005002bb0023033afffd0473009c0473009c
01c7002a01c7002a0473003d04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a05c1005b05b3005b076c008807760088
07760088078d008807ca006f07a0006f0473007704730077047300770473
0077047300770473007706c2008806c200880874008808890088085b0088
0868008804e3003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3
003b04e3003b073300880733008808e5008808fa008808cc008808d90088
0929006f0929006f023900b0023900b002390041023900390239003d0239
003d023900230239002303a5008803a5008805570088056c0088053e0088
054b0088059b006f059b006f04e3006f04e3006f04e3006f04e3006f04e3
006f04e3006f07a5008807a5008809570088096c0088093e0088094b0088
04e300b804e300b804e300b804e300b804e300b804e300b804e300b804e3
00b806c20088088900880868008808b8006f0610006a0610006a0610006a
0610006a0610006a0610006a0610006a0610006a07910088079100880943
008809580088092a0088093700880987006f0987006f04e3005a04e3005a
047300770473007704e3003b04e3003b023900b0023900b004e3006f04e3
006f04e300b804e300b80610006a0610006a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a0811005b080c005b0991
008809d80088097f0088099b008809d3006f09ce006f04e3003b04e3003b
04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b096c0088096c
00880b1e00880b3300880b0500880b1200880b62006f0b62006f0610006a
0610006a0610006a0610006a0610006a0610006a0610006a0610006a09ca
008809ca00880b7c00880b9100880b6300880b7000880bc0006f0bc0006f
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a0556
001b0556001b0666002e0661002f07a9001b04e3003b04e3003b04e3003b
04e3003b04e3003b06ac002e06a7002f06d2002e06ba002f083100b00239
ffcf0239ffce0239ffcc0239ffda0239ffdc0239ffc50239ffe10239ffee
0343002e0348002f04e300b804e300b804e300b804e300b804e300aa04e3
00aa04e300b804e300b8055600290556002906b1002e0713002f06c20088
0610006a0610006a0610006a0610006a0610006a075a002e0789002f0792
002e07a9002f0878005e04e3005a0473007704e3003b023900b004e3006f
04e300b80610006a05d5007206a7002f06ba002f0348002f0789002f0713
002f07a9002f0239ffcb04e300b804ac002504ea011704f700a102f3001b
02bb00230473002504e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a0239ffd70239ffe40239ffd20239ffd70239
ffdb0239ffdb0239ffcd0239ffe00239ffc80239ffc30239ffdc0239ffdc
0239ffd70239ffd70239ffd20239ffcd0239ffd20239ffd704e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b804e3
00b804e300b80666002e0661002f05c1005b076c00880776008805b3005b
07760088078d00880666002e0661002f05c1005b076c00880776008805b3
005b07760088078d00880343002e0348002f0348002f03a5008805570088
053e008803a50088056c0088054b00880343002e0348002f0348002f03a5
008805570088053e008803a50088056c0088054b008806b1002e0713002f
0713002f06c20088088900880868008806c20088088900880868008806b1
002e0713002f0713002f06c20088088900880868008806c2008808890088
0868008805c700b405c7005a0639005001c70020051d0029055600af05c7
00a10000fd31055200680473003806390050047300480772005b07380045
05e5001306ac003d06ac003d06ac003a06ac003a066d001d04e3001b0822
00d005e1008a06a8007f05c7008f0556001e0400000b079900d005cf008a
04da003802ca002405d900160588003805c700b404730052031f000004da
00a103eb00a1064900a104cf00840556009c0400008004e3002f04000034
08d9001406dd0030054f0072040a0047056d00a50412007a05df00ac0486
009105df00630412003f04f8002b0412003a056d002e0412002405ac00ac
047a007705ac00ac047a00770556002a0556002a04d900bc037c009105ac
00ac047a0077063200a504df007a075f00ac059b00910556002a0556002a
06fe0028054e00350748003a059400260748003a059400260772004805b3
003805df00ac0486009104730052054f00ac054f00ac06a8007f04dc005d
0855004405e0002605560025040000040556003404b6000b0400003b054f
0072040a004705f10026049c0024023900bd056d002e0412002405560034
0556001e05c7005a0400003b0473ffe804e3002101c7003e02bb002304e3
0021055600af0473009c0473009c055600af047300480456002301c7ffda
05c700aa01a9002101a9002102aa003302aa003302aa003a02aaffe90239
00e302aa003c02aa003c057f005b04ac002504ac0074023900e304ac0025
057c004c04ac0074023900e3023900e3063900710412003f0412003f0556
00ae0473008005c7005a06aa009705dd0097059b004605c7005a05c7005a
05c7005a0400003b0400003b0400003b0473003805ca003006c6002e063f
002f031f001a062e001904e900310488004502aa00be02aa00be02aa00be
02aa00be0277003b0277003b034b0000034b0000034b0000034b0000034b
00000487001203f7001e045e0054043600830436008302fd005d034f0012
069900390655003e052900300000f86506e1002204e9002001e0004b01e9
004b015d0025015d000a0199002a0198001202fb00170304001702670013
025700120257001202c8004b01d8000701d8000707e9003a097c004b0931
004909310002013c004b04570022058900050589000d04be001504420018
01d8000701d8000703fe003d03fe003d0404003a036f000b0467003c0000
fb760000fcc10000fc080000fc730000fc730000fa630000fce00000fe95
0000fc8e0000fc510000fa0b0000fc9f0465003604650022040100340401
002407760017044c001b03ea001d051a00340653003204c8003306c20088
08890088086800880556001b0556001b0239ffdf0239ffe1055600290556
00290404001505e5001405e5001405e500140800ffeb0800ffeb080003b4
0800038c080003b40800038c0800ffe90800ffe9080003b40800038c0800
ffe90800ffe9080000000404001500e40042023a0029023a0024023a001e
02000006023a002405c7005a0639006305c7005a047100220552002904e3
00210556001e04d0002805c2004e04d9004e05c7005a06aa008405d00031
06640037082d00350552006805520068039c003f0380003b039c003f0380
003b039c00530381003c039c00530381003c02eb005302e3005302e30053
02e3005302eb005302eb000802e3000002e3000002e3000002eb00080363
005303630053036300530363005303630053027f00010330004503b20026
03c3000b050b0031069c00290390007f0000fc4f0000fc4f0000fc420000
fc420000fc420000fc420000fc010000fc010000fd440465002204010024
0a3900500873003b0436008304360083043600830329003a0329003a0355
0028050d00340329005403290028032900330329003302f6003a02f6003a
0329002b0143005e02d7005b04bb005e0329005e0329002a02d700290329
00270329002a03290054019400100329005b0373003704bb005e02d70008
037800800329000d0378004a04dc004d0632002a04be0033047300390473
003b04e6003804e1003a04fa0039076e003e0329000a0143005e01e40061
0329005b02d70008037800800329000d037800790329000a042b005205c5
001001c70084045e0054070a002e06cb003504d6001b04fa001a02d8000d
04e9001b0330000d02d9000a02db000c01c700aa02aa004e01c700aa02aa
004e01c700aa02aa004e01c700aa02aa004e053d007a0708003b0310008f
0574009708c000220473004002e000340473004004730031047300340473
00420473004d0430002b047300420473004903cc000903cc000903cc0009
0428005803b7006b0497007104b0004f0797004a0418006a045a005505d5
004c07a9004404bf004b03e0003b0965004a03f900560419004e06ed004a
0420003f0450005006a3004a03f3004d0633006006b90047064000440419
004b0667004503be003e043d003d03d60052048400440412004a04160046
0497003903fa00580650002d03cd005e0560005604950032045e005503e9
003e0462005406c20049044500f604d500b10473005e0473002f00000000
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c000000b8000000b80000
00b8000000b8000000b8000000b8000000b8000000b8000000b8000000b8
000000b8000000b8000000b8000000b8000000b8000000b8000001d00000
01d0000001d0000002940000029400000294000002940000029400000294
0000029400000294000002e4000002e4000002e4000002e4000002e40000
02e4000002e4000002e40000034000000340000003400000034000000340
000003400000034000000340000003400000034000000340000003400000
0340000004d4000004d4000005d8000006b0000008440000084400000844
000008e40000094000000940000009400000098400000a7c00000b340000
0c2400000d0800000d0800000d9400000f5400000ff400000ff400000ff4
00001150000011500000127c0000127c0000127c0000127c0000127c0000
127c0000127c0000127c0000127c0000127c0000127c0000127c0000127c
0000127c0000127c0000127c0000127c0000127c0000127c0000127c0000
127c0000127c0000127c0000127c0000127c0000127c0000127c0000127c
0000127c0000127c0000127c0000127c0000127c0000127c0000127c0000
127c0000127c0000127c0000127c0000127c0000127c0000127c0000127c
0000127c0000127c0000127c0000127c0000127c0000127c0000127c0000
127c0000127c0000127c0000127c0000127c0000127c0000127c0000127c
0000127c0000127c0000127c0000127c0000127c0000127c0000127c0000
127c0000127c0000127c0000127c0000127c0000127c0000127c0000127c
0000127c0000127c0000127c0000127c0000127c0000127c0000127c0000
127c0000127c0000127c0000127c0000127c0000127c0000127c0000127c
0000127c0000127c0000127c0000127c0000127c0000127c0000127c0000
127c0000127c0000127c0000127c0000127c000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400000
134000001340000013400000134000001340000013400000134000001340
000013400000134000001340000013400000134000001340000013400001
0000089500920009006b0007000200100010005d000007e80a1d00040001
0000003902b2000100000000000000500000000100000000000100090050
0001000000000002000700590001000000000003001f0216000100000000
00040009023500010000000000050008023e000100000000000600090246
00010000000000070032024f0001000000000012000903f8000100000000
01000009040100010000000001010010040a0001000000000102000e041a
00010000000001030014042800010000000001040012043c000100000000
01050009044e0001000000010007002f02810001000000020007003c02b0
0001000000030007003002ec0001000000040007003a031c000100000005
00070036035600010000000600070030038c0001000000070007003c03bc
0003000104030002000c01580003000104040002000600cc000300010405
0002000e01760003000104060002000c00e60003000104070002000c007c
0003000104080002000801920003000104090002000e006000030001040b
0002001000f200030001040c0002000e006e00030001040d00020008019a
00030001040e0002000c01a20003000104100002001000a8000300010411
0002000a00880003000104120002000600b8000300010413000200100098
0003000104140002000c01020003000104150002000e010e000300010416
0002000c00da0003000104180002000c01c60003000104190002000e012a
00030001041a00020012016400030001041b0002000e01d200030001041d
0002000c013800030001041e00020008014400030001041f0002000c014c
0003000104210002000e01ae0003000104220002001201e000030001042a
0002001801fe0003000104390002000c01f200030001043e0002000a01bc
0003000108040002000600920003000108090002000e0184000300010816
0002000e011c000300010c010002000800d2000300010c0a0002000e00be
a920313939302d32303036204170706c6520436f6d707574657220496e63
2e20a92031393831204c696e6f7479706520414720a920313939302d3931
205479706520536f6c7574696f6e7320496e632e48656c76657469636152
6567756c61720052006500670075006c006100720043006f007500720061
006e0074004e006f0072006d0061006c30ec30ae30e530e930fc5e3889c4
4f530052006500670075006c006900650072005200650067006f006c0061
00720065c77cbc18ccb40052006500670075006c006100726a196e969ad4
06390627062f064a004e006f0072006d0061006c004e006f0072006d0061
006c004e006f0072006d00610061006c0069004e006f0072006d0061006c
0052006500670075006c006100720052006500670075006c00610072041e
0431044b0447043d044b0439004e006f0072006d0061006c0e1b0e010e15
0e34004e006f0072006d0061006c004e006f0072006d0061006c00520065
00670075006c00610072006e00690052006500670075006c006100720052
006500670075006c00610072039103c003bb03ac05e805d205d905dc004e
006f0072006d00e1006c0052006500670075006c00650072004200690061
00730061004e006f0072006d0061006c0052006500670075006c00610072
041704320438044704300439043d043804390928093f092f092e093f0924
0054006800f4006e006700200074006801b01edd006e006748656c766574
6963613b2031332e30643165313b20323031372d30362d313448656c7665
7469636131332e306431653148656c76657469636148656c766574696361
206973206120726567697374657265642074726164656d61726b206f6620
4c696e6f7479706520414748656c7665746963612065737420756e65206d
617271756520648e706f738e65206465204c696e6f747970652041474865
6c766574696361206973742065696e2065696e676574726167656e657320
576172656e7a65696368656e20646572204c696e6f747970652041474865
6c766574696361208f20756e206d61726368696f20726567697374726174
6f206469204c696e6f7479706520414748656c7665746963612069732065
656e20676572656769737472656572642068616e64656c736d65726b2076
616e204c696e6f7479706520414748656c766574696361208a7220657474
20726567697374726572617420766172756d8a726b6520669a72204c696e
6f7479706520414748656c76657469636120657320756e61206d61726361
2072656769737472616461206465204c696e6f7479706520414748656c76
657469636120657220657420726567697374726572657420766172656dbe
726b652074696c68bf72656e6465204c696e6f7479706520414748656c76
65746963614c6967617475726573436f6d6d6f6e204c6967617475726573
4e756d6265722053706163696e6750726f706f7274696f6e616c204e756d
626572734d6f6e6f737061636564204e756d626572734e6f204368616e67
65000000b800532bb800492bb8003f2bb800352bb8002b2b4118008001a6
009001a600a001a600030069018b0079018b0089018b0099018b00040089
018b0099018b00a9018b00b9018bb2040840ba0179001a014a400b041f54
14191f180a0b1fd2b80106b49e1fd918e3bb0119000d00e10119b20d0009
410a01a0019f0064001f01a50025017a00480028019ab3296c1f60410a01
a9007001a9008001a90003008001a9000101a9b21e321fbe012c00250401
001f0126001e0401b61fe7312d1fe531b80201b21fc227b80401b21fc11e
b80201400f1fc01d9e1fbf1d671fbe1d671fab27b80401b21faa29b80401
b61fa91d6c1f931eb8019ab21f921db80101b21f911db80101b21f751db8
0201b61f6d29961f6431b8019ab21f4c96b802abb21f391db80156400b1f
3638211f351de41f2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb2
1f201eb8012540111f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b
002a019bb2254a1fba019b0025017ab349293896b8017bb348283125b801
7a403648289629482725294c1f252946272729482756c80784075b074107
32072b072807260721071b071408120810080e080c080a08080807b801ac
b23f1f06bb01ab003f001f01abb308060805b801aeb23f1f04bb01ad003f
001f01adb70804080208000814b8ffe0b40000010014b801abb410000001
00b801abb606100000010006b801adb300000100b801ad401f0400000100
0410000001001002000001000200000001000002010802004a00b0018db8
06008516763f183f123e113946443e113946443e113946443e113946443e
113946443e11394660443e11394660443e11394660442b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d
59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b
2b4b5279b376706a66456523456023456560234560b08b766818b0806220
20b16a704565234520b003266062636820b003266165b070236544b06a23
4420b176664565234520b003266062636820b003266165b066236544b076
2344b10066455458b166406544b27640764523614459b36242725d456523
456023456560234560b089766818b080622020b172424565234520b00326
6062636820b003266165b042236544b072234420b1625d4565234520b003
266062636820b003266165b05d236544b0622344b1005d455458b15d4065
44b262406245236144592b2b2b2b456953427374b8019a2045694b20b028
53b049515a58b020615944b801a620456944750000>
[4929 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 3 <> PBAAAA+Helvetica AddT42Char 
1 108 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>PBAAAA+Helvetica AddT42Char 
1 184 36 <0003001e0000053d05bd0002000a000b00da405048015801680103880397
04980aa90ab809b80a06280a010007060601020809090102080a00070501
8c01030420140a0a251209090114050525120606010b0b0503090a040605
010b02010300021e0708b80159400904030206090a030508b801a840120d
0d17171a059e019e0a190c0da1218c5e182b2b194ef4184dfdfd194e4565
44e6464418003f173c3f3c4dfd3cfd3c11393f011112393912393911392f
872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b003c01bb0
03c4592b1112393912393987103c3c07103c3c3130015d5d005d010b0113
3301230321032301038edfed85e10215da95fdbb9fcc0290025a0289fd77
0363fa4301b8fe4805bd>PBAAAA+Helvetica AddT42Char 
1 464 39 <000200a50000056305bd000d00180067401f871196120232080b1e0f0200
1e17080831131a1a0d250e19191ad6217689182b2b4ef44dfd4e10f64ded
003ffd3ffd3130437940260116112515260607050704070307020705060a
10083201011608320109120b320107140032002b2b012b2b2a2b2b815d25
32373637363736351002232111032120171611140702290102d06541744a
3b1a0fd9f1fe9fc80253012fa795589bfe86fdafaa15276f598b53470111
012efb980513d7c2fed1eabdfeb20000>PBAAAA+Helvetica AddT42Char 
1 660 47 <0001009c0000044b05bd000500314013000203021e040508031a07010225
0500190607b80153b321765e182b2b4ef43c4dfd3c4e10e6003f3c4dfd3c
3f31301333112115219cc702e8fc5105bdfaf2af>PBAAAA+Helvetica AddT42Char 
1 740 55 <00010021000004c905bd00070034401a01061e00070204080917171a00fb
0203250504fb0619088c5e182b4e10f44df43cfd3cf44e456544e6003f3f
3c4dfd3c3130011521112311213504c9fe11cafe1105bdaffaf2050eaf00
0000>PBAAAA+Helvetica AddT42Char 
1 832 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>PBAAAA+Helvetica AddT42Char 
1 1496 71 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>PBAAAA+Helvetica AddT42Char 
1 1712 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>PBAAAA+Helvetica AddT42Char 
1 2116 75 <00010084000003ed05c200160053402c0607070817071708270427137507
750808130d0213150000111d0607150c0a0d290a1a180115290016191718
b80106b3216242182b2b4ef43c4dfd3c4e10f64ded003f3c3fed3f113939
0112393130005d1333113637363332171615112311342726232206151123
84b440335782e9532db91e318770b6b405c2fddc512139a3599efd5102a3
7637589ad6fdc8000000>PBAAAA+Helvetica AddT42Char 
1 2276 76 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>PBAAAA+Helvetica AddT42Char 
1 2368 79 <000100890000013d05bd0003002940150000030a0517171a010229000319
0405aa216242182b2b4ef43c4dfd3c4e456544e6003f3f31301333112389
b4b405bdfa430000>PBAAAA+Helvetica AddT42Char 
1 2436 80 <0001008400000625044700260085403b0708070e060f1708170e170f2708
270e270f4819560b670b0c23250a1a1d23190a02041725211d171d0d0607
00061b1c2503130a2817171a112914b80101b21a291db80101400a00012e
25292600192728b8010db3216242182b2b4ef43c4dfde410f4edf4fd4e45
6544e6003f173c3f3f3c4deded111217390111123912393130005d133315
36373633321716173e013332171615112311342623220615112311342726
23220615112384b240345971804e2c243ca265d84e2abb6b4d6a99b71a29
7066a7b4042f984f243d3f244656539c548efd3702e86b508ea6fd9102bb
6d324b9ecffdc800>PBAAAA+Helvetica AddT42Char 
1 2684 81 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>PBAAAA+Helvetica AddT42Char 
1 2868 82 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>PBAAAA+Helvetica AddT42Char 
1 3108 83 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>PBAAAA+Helvetica AddT42Char 
1 3336 85 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>PBAAAA+Helvetica AddT42Char 
1 3476 86 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>PBAAAA+Helvetica AddT42Char 
1 3924 87 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>PBAAAA+Helvetica AddT42Char 
1 4432 92 <00020015fe4903e804490018001900ca406e8a158818a718030706170638
12481258126707770377078c1498009705981597169717a800a816104800
4b154717c915044405c605028705a600a601a705a8170524280518151716
010006150c0b0f1d080e19071919161b17171a050001af171518af0c8f16
191a1bd421677e182b2b194ef44de418fd3939fd3939194e456544e61812
392f003f3f4dfd3932192f183f3c3c3c123939014b527940121515001616
6d121717180501016d12000018872e2b107dc418872e2b10087dc418015d
71313071015d005d013306030207020623222627351e01333236373e0137
013301030321c7268362429c809c26291e2f2a10322f10053e0efe74cc01
1f01042f67fe91feecaefe66b40608a40d062118089424044efc98038200
>PBAAAA+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>PBAAAA+Helvetica AddT42Char 
PBAAAA+Helvetica /CharStrings get begin
/space 3 def
/one 20 def
/A 36 def
/D 39 def
/L 47 def
/T 55 def
/a 68 def
/d 71 def
/e 72 def
/h 75 def
/i 76 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/s 86 def
/t 87 def
/y 92 def
end
PBAAAA+Helvetica /Encoding get
dup 32 /space put
dup 49 /one put
dup 65 /A put
dup 68 /D put
dup 76 /L put
dup 84 /T put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/SQXXLA+Helvetica /PBAAAA+Helvetica findfont ct_VMDictPut
/SQXXLA+Helvetica*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 15{/.notdef}rp /A 2{/.notdef}rp /D 
7{/.notdef}rp /L 7{/.notdef}rp /T 12{/.notdef}rp /a 2{/.notdef}rp /d 
/e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t 4{/.notdef}rp /y 
134{/.notdef}rp]
SQXXLA+Helvetica nf
SQXXLA+Helvetica*1 [8.63117 0 0 -8.63117 0 0 ]msf
38.1435 276.197 mo
(ADL initially has)sh
41.7398 286.267 mo
(1 hidden layer)sh
33.0862 296.337 mo
(and 1 hidden node)sh
10.0697 29.4898 mo
(T)sh
15.0259 29.4898 mo
(ime stamp)sh
10.0697 53.2256 mo
(Data point)sh
grestore
false sop
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: SQXXKW+ AddGlyphs
systemdict begin SQXXKX+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g59 {444 0 -27 -441 447 11 setcachedevice
243 -355 mo
229 -423 217 -441 192 -441 cv
169 -441 136 -434 75 -412 cv
64 -408 li
67 -392 li
85 -397 li
104 -402 116 -404 124 -404 cv
149 -404 156 -396 170 -336 cv
198 -212 li
116 -96 li
95 -66 76 -47 65 -47 cv
59 -47 49 -50 39 -56 cv
26 -63 16 -67 7 -67 cv
-13 -67 -27 -51 -27 -31 cv
-27 -5 -8 11 23 11 cv
54 11 74 2 118 -57 cv
206 -176 li
235 -57 li
247 -7 262 11 294 11 cv
332 11 358 -13 416 -103 cv
401 -112 li
393 -102 389 -96 380 -84 cv
357 -54 346 -44 333 -44 cv
319 -44 310 -57 303 -85 cv
271 -219 li
265 -243 263 -257 263 -264 cv
307 -341 343 -385 361 -385 cv
385 -385 394 -368 413 -368 cv
433 -368 447 -383 447 -404 cv
447 -426 430 -441 406 -441 cv
362 -441 325 -405 255 -298 cv
243 -355 li
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/SQXXKX+*1 
[32{/.notdef}rp /g5A /g59 222{/.notdef}rp]
SQXXKX+ nf
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
38.8403 255.339 mo
(!)sh
false sop
1 /0 /CSD get_res sepcs
1 sep
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
43.4705 256.777 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
70.4879 255.339 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
75.1182 256.777 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
100.697 255.339 mo
(!)sh
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: SQXXKY+ AddGlyphs
systemdict begin SQXXKZ+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g14 {500 0 41 -676 431 14 setcachedevice
61 -510 mo
102 -584 148 -616 210 -616 cv
276 -616 318 -582 318 -514 cv
318 -453 286 -408 237 -380 cv
217 -368 191 -357 153 -344 cv
153 -330 li
210 -330 233 -327 255 -320 cv
324 -300 359 -251 359 -175 cv
359 -90 303 -22 229 -22 cv
201 -22 180 -27 143 -53 cv
115 -73 99 -79 82 -79 cv
59 -79 41 -64 41 -43 cv
41 -7 80 14 153 14 cv
242 14 337 -15 385 -79 cv
414 -117 431 -166 431 -219 cv
431 -271 415 -317 387 -348 cv
366 -370 348 -382 304 -401 cv
371 -441 397 -491 397 -539 cv
397 -621 334 -676 241 -676 cv
137 -676 74 -609 45 -514 cv
61 -510 li
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/SQXXKZ+*1 
[32{/.notdef}rp /g9 /g12 /gA /g13 /g14 219{/.notdef}rp]
SQXXKZ+ nf
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
105.327 256.777 mo
($)sh
false sop
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: SQXXKW+ AddGlyphs
systemdict begin SQXXKX+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g4C {444 0 14 -683 461 11 setcachedevice
461 -428 mo
282 -428 li
282 -412 li
296 -412 li
321 -412 333 -405 333 -394 cv
333 -374 284 -326 190 -254 cv
147 -221 li
267 -677 li
261 -683 li
202 -670 163 -663 104 -656 cv
104 -640 li
122 -640 li
156 -640 171 -634 173 -616 cv
171 -599 168 -576 155 -528 cv
14 0 li
89 0 li
137 -180 li
177 -212 li
193 -168 219 -106 237 -71 cv
269 -8 289 11 318 11 cv
358 11 383 -14 429 -98 cv
414 -109 li
409 -100 404 -91 399 -83 cv
381 -52 369 -41 354 -41 cv
335 -41 312 -78 273 -170 cv
236 -258 li
383 -389 414 -409 461 -412 cv
461 -428 li
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/SQXXKX+*1 
[32{/.notdef}rp /g5A /g59 /g4C 221{/.notdef}rp]
SQXXKX+ nf
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
72.6457 15.1045 mo
(")sh
false sop
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: SQXXKW+ AddGlyphs
systemdict begin SQXXKX+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g55 {278 0 38 -546 296 11 setcachedevice
296 -428 mo
216 -428 li
244 -531 li
245 -533 245 -538 245 -538 cv
245 -543 242 -546 236 -546 cv
232 -546 226 -543 222 -537 cv
186 -483 121 -434 89 -427 cv
65 -422 56 -413 56 -402 cv
56 -402 56 -399 57 -396 cv
132 -396 li
54 -100 li
46 -68 38 -37 38 -26 cv
38 -1 57 11 84 11 cv
136 11 167 -18 227 -110 cv
214 -117 li
165 -54 149 -38 133 -38 cv
124 -38 118 -41 118 -54 cv
118 -57 119 -64 120 -68 cv
207 -396 li
291 -396 li
296 -428 li
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/SQXXKX+*1 
[32{/.notdef}rp /g5A /g59 /g4C /g55 220{/.notdef}rp]
SQXXKX+ nf
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
169.746 40.9981 mo
(#)sh
%ADOBeginSubsetFont: SQXXLB+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /SQXXLB+ def
/FontMatrix [0.001 0 0 -0.001 0 0 ] def
/FontBBox [0 -0.041 0.636 0.676 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /gC put
dup 33 /g12 put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/gC {685 0 48 -547 636 41 setcachedevice
636 -220 mo
636 -286 li
375 -286 li
375 -547 li
309 -547 li
309 -286 li
48 -286 li
48 -220 li
309 -220 li
309 41 li
375 41 li
375 -220 li
636 -220 li
cp
false sop
f
}bind def
/g12 {500 0 111 -676 394 0 setcachedevice
394 0 mo
394 -15 li
319 -15 299 -33 299 -76 cv
299 -673 li
290 -676 li
111 -585 li
111 -571 li
138 -581 li
156 -588 173 -593 183 -593 cv
204 -593 213 -578 213 -544 cv
213 -95 li
213 -40 192 -19 118 -15 cv
118 0 li
394 0 li
cp
false sop
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/SQXXLC+ /SQXXLB+ findfont ct_VMDictPut
/SQXXLC+*1 
[32{/.notdef}rp /gC /g12 222{/.notdef}rp]
SQXXLC+ nf
SQXXLC+*1 [10.4437 0 0 -10.4437 0 0 ]msf
175.703 40.9981 mo
( )sh
185.728 40.9981 mo
(!)sh
false sop
1 /0 /CSD get_res sepcs
1 sep
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
143.134 255.339 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
147.764 256.777 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
174.781 255.339 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
179.411 256.777 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
204.99 255.339 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
209.621 256.777 mo
($)sh
%ADOBeginSubsetFont: PBAAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SQXXLA+Helvetica gcheck setglobal} if
1 4732 192 <0003001c0000037805d20017001b001f006140361be51900071d060a1d03
010f14391d160d061f110a2117171a1b1e29181f0e0d1129171207120f0e
1f0e020efc14192021d2216742182b2b4ef44dfd5d39c42f3cfd3c10d63c
fd3c4e456544e6003f3c3f3c3c4dfd3c3fedd4ed3fed0131301237363332
1617152e0123220615331523112311233533352535331507331123b5233f
b41124171c190b5220b2b4b295950213b4b4b4b40542345c0202a4020155
ae8efc64039c8ea81fccccc7fbd60000>SQXXLA+Helvetica AddT42Char 
SQXXLA+Helvetica /CharStrings get begin
/fi 192 def
end
SQXXLA+Helvetica /Encoding get
dup 33 /fi put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SQXXLA+Helvetica*1 
[32{/.notdef}rp /space /fi 15{/.notdef}rp /one 15{/.notdef}rp /A 2{/.notdef}rp 
/D 7{/.notdef}rp /L 7{/.notdef}rp /T 12{/.notdef}rp /a 2{/.notdef}rp 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t 4{/.notdef}rp 
/y 134{/.notdef}rp]
SQXXLA+Helvetica nf
SQXXLA+Helvetica*1 [8.63117 0 0 -8.63117 0 0 ]msf
131.637 276.197 mo
(A )
[5.75693 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Helvetica-Bold Initial
ct_T42Dict begin
-1.016 -0.48 1.434 1.156
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Helvetica-Bold
Type42DictBegin
[<00010000000b000b000b000b637674206741296a000000bc000003886670
676db24d5cc50000044400000b97676c7966dd4028cc000060d8000013d4
68656164da0d84dd00000fdc000000366868656109860f9b000010140000
0024686d7478d124be4a00001038000022546c6f636100a52fb00000328c
000022586d61787011090c90000054e4000000206e616d651875eb0d0000
55040000080070726570b552e59100005d04000003d36764697200000000
000000000000000005c0001105c2002d0597001d0442001d0000ffda0000
ffdb0000ffdafe53ffef05d0000afffdffed03340000012200000122dffb
011400af000700b7007e000400d200aa0109002300ed013200d9011d012a
00d800fe00db00e2001a008b00a0001a004500e801f6000900e901280132
00360082009e009fff700070003f003f00e801050015003800e9ff7bffc8
fff90042008a00c401070113011dffb9002f00870087009a009c010c0262
ffb10018004c00770080008200c900daffb2ffea001a003600e50111012f
043bffdd00020005001a0039008900aa00b701210123012a015bffe50002
00180023005c00aaff4dff76ffb2ffef001a002f004e007b008a00e1011f
0126012b019a01de03edff80ff8e0007001c004e005500630063006d0081
0098009c00ad011f01260162041c051500390044004b0063008e00cc00e8
00f2010001290142017802d503ea03f0043b049affc400050055005c0060
009f0103011d012401550164017001ad01b401c301f602370261033903d5
047004a100020055008800a100bd00c700d300dd00eb00ed00fa00fd0104
012b013e014f017b019d01ad01e20233025d027d028c02da02ef033103de
0407048b058505bbff04ffd5fffa0007001e002a003b0047005100580065
00650066006e0075007f00840107009700b100c300cc00df00df010a0110
012f013101470154015b016b0179009101a401ba01dc01e401e601e901f6
0213021f0223022f0276027d0282028902ad02b202b902ed03110374037d
03c003de03f60415045d04c004c004df052d0574061c064b0751fe94fedf
ff2dff90ff9affea0016001600240029002d003e0104006d006d00840087
0089008e009c00a400ab00ae00b200b2fffb013900c400d100df00e100ef
00f70121011c011c012101320138015001510154016c016d017f019801a4
01aa01b601ba01bb01bb00d701d701fb01fb01fe00190209022d025b0261
02790279029a009802d302da02ef030c03210328032d034b0353fff103ad
03b103f20425045a0471047b048a0498049f051c053d0557055a05700595
05b605cb05d605ef05f4061d068706a406b406d307080734079807fe0122
01320120012500b400be0082009603700132012400430184011d015600cc
010500ed00c500fb00f900c000a7011d00fe035500880026ffa100b8ff88
00dd00bd00b5037c003c00910293024aff3f03a803090132fff700820030
002a002a002a002a002a002a402a292827262524232221201f1e1d1c1b1a
191817161514131211100f0e0d0c0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b09051582320b00d44235921212d2c20204518684420b001
602045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b2d
2c2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c20
45b00325456164b050515845441b2121592d2cb00143632362b0002342b0
0f2b2d2c2045b0004360442d2c20b0032552582359212d2c69b04061b000
8b0c6423648bb8400062600c642364615c58b0036159b002602d2c45b011
2bb0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458c
b0172344b0177ae5182d2cb002254661658a46b040608b482d2cb0022546
608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b00325
45b019234445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005058b21a401a4523604459b0005258b219401945236044592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442db8002a2c4bb800095058b101018e59b801ff85
b800441db9000900035f5e2db8002b2c2020456944b001602db8002c2cb8
002b2a212db8002d2c2046b003254652582359208a208a49648a20462068
6164b004254620686164525823658a592f20b00053586920b000545821b0
40591b6920b000545821b0406559593a2db8002e2c2046b0042546525823
8a592046206a6164b0042546206a61645258238a592ffd2db8002f2c4b20
b0032650585158b080441bb04044591b21212045b0c05058b0c0441b2159
592db800302c2020456944b001602020457d691844b001602db800312cb8
00302a2db800322c4b20b003265358b0801bb040598a8a20b00326535823
21b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b00326
53582321b801408a8a1b8a235920b80003265358b0032545b80180505823
21b8018023211bb003254523212321591b2159442db800332c4b53584544
1b2121592db800342c4bb800095058b101018e59b801ff85b800441db900
0900035f5e2db800352c2020456944b001602db800362cb800352a212db8
00372c2046b003254652582359208a208a49648a204620686164b0042546
20686164525823658a592f20b00053586920b000545821b040591b6920b0
00545821b0406559593a2db800382c2046b00425465258238a592046206a
6164b0042546206a61645258238a592ffd2db800392c4b20b00326505851
58b080441bb04044591b21212045b0c05058b0c0441b2159592db8003a2c
2020456944b001602020457d691844b001602db8003b2cb8003a2a2db800
3c2c4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a1b
8a235920b0032653582321b801008a8a1b8a235920b0032653582321b801
408a8a1b8a235920b80003265358b0032545b8018050582321b801802321
1bb003254523212321591b2159442db8003d2c4b535845441b2121592db8
003e2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2d
b8003f2c2020456944b001602db800402cb8003f2a212db800412c2046b0
03254652582359208a208a49648a204620686164b0042546206861645258
23658a592f20b00053586920b000545821b040591b6920b000545821b040
6559593a2db800422c2046b00425465258238a592046206a6164b0042546
206a61645258238a592ffd2db800432c4b20b0032650585158b080441bb0
4044591b21212045b0c05058b0c0441b2159592db800442c2020456944b0
01602020457d691844b001602db800452cb800442a2db800462c4b20b003
265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b003
2653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a23
5920b80003265358b0032545b8018050582321b8018023211bb003254523
212321591b2159442db800472c4b535845441b2121592db800482c4bb800
095058b101018e59b801ff85b800441db9000900035f5e2db800492c2020
456944b001602db8004a2cb800492a212db8004b2c2046b0032546525823
59208a208a49648a204620686164b004254620686164525823658a592f20
b00053586920b000545821b040591b6920b000545821b0406559593a2db8
004c2c2046b00425465258238a592046206a6164b0042546206a61645258
238a592ffd2db8004d2c4b20b0032650585158b080441bb04044591b2121
2045b0c05058b0c0441b2159592db8004e2c2020456944b001602020457d
691844b001602db8004f2cb8004e2a2db800502c4b20b003265358b0801b
b040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b8
01008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8000326
5358b0032545b8018050582321b8018023211bb003254523212321591b21
59442db800512c4b535845441b2121592db800522c4bb800095058b10101
8e59b801ff85b800441db9000900035f5e2db800532c2020456944b00160
2db800542cb800532a212db800552c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db800562c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b800572c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db800582c2020456944b001602020457d691844b00160
2db800592cb800582a2db8005a2c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db8005b2c4b535845441b2121592db800
5c2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
005d2c2020456944b001602db8005e2cb8005d2a212db8005f2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db800602c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800612c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800622c2020456944b001
602020457d691844b001602db800632cb800622a2db800642c4b20b00326
5358b0401bb000598a8a20b0032653582321b0808a8a1b8a235920b00326
53582321b800c08a8a1b8a235920b0032653582321b801008a8a1b8a2359
20b0032653582321b801408a8a1b8a235920b80003265358b0032545b801
8050582321b8018023211bb003254523212321591b2159442db800652c4b
535845441b2121592d0000010000000100002ae52ada5f0f3cf500110800
00000000a2272e8000000000d5670bf1f7dcfc270b7e0946000100090001
000100000000000100000629fe2900000c01f7dcfcdb0b7e000100000000
00000000000000000000089505c7009a00000000023900000239000002aa
00e103cb00a70473000004730038071d002f05c7006f01e7006302aa0059
02aa0015031d002f04ac00490239007602aa002f023900800239ff900473
00400473008e047300400473003604730036047300360473004004730034
047300360473003d02aa00e802aa00e804ac001704ac004904ac001704e3
007b07cd00c705c7003405c700a105c7005c05c7009c055600a504e3009c
0639005505c7009a023900840473002d05c700a104e3009c06aa009705c7
009706390065055600a30639006505c700a30556005504e3002105c7009c
0556002f078d001e055600210556002304e3003402aa00800239ff9002aa
002f04ac008b0473000002aaffce0473003b04e3007b0473004704e3003f
0473002f02aa001504e3004204e300870239008902390009047300820239
008b071d008004e3008704e3004204e3007d04e3003c031d008204730042
02aa001504e3007d0473001a0639000e0473001a0473001504000021031d
0000023d006a031d002d04ac000405c7003405c7003405c7005c055600a5
05c700970639006505c7009c0473003b0473003b0473003b0473003b0473
003b0473003b047300470473002f0473002f0473002f0473002f02390076
0239ffce0239ffb60239ffd504e3008704e3004204e3004204e3004204e3
004204e3004204e3007d04e3007d04e3007d04e3007d047300470333005e
04730045047300420473004102cd00910473ffc304e3008905e5001a05e5
001a080000cb02aa007602aaffd504640049080000120639004705b40019
0464004904640047046400490473ffea049cffcb03f4002405b4fff70696
0007046400290231007602f6002802ec000e06250031071d003804e3002a
04e3006d02aa00e104ac00490464ffd50473001e0464004904e5fffa0473
00af04730000080000bd0239000005c7003405c70034063900650800004b
078d003f0473fffb080000f10400008b0400009702390089023900840464
004903f4002104730015055600230156fea305f4004402aa00aa02aa00aa
04e3001c04e3001c047300470239007102390092040000920800000405c7
0034055600a505c70034055600a5055600a5023900760239ffb60239ffd5
0239ffce0639006506390065065200690639006505c7009c05c7009c05c7
009c0239008902aaffb602aaffa802aaffbd02aaffc902aa009a02aa0042
02aa001202aaffd302aa004202aaffb604e3fff10239ffe8055600550473
004204e3003404000021023d006a05c7001204e3006d0556002304730015
0556008004e3008004ac004904ac005502aa005002aa001a02aa001206ac
002f06ac005a06ac004e047300000639005504e300420239008405560055
0473004205c7005c0473004705c7005c0473004704e3003f05c700340473
003b05c700340473003b05c700340473003b05c7005c0473004705c7005c
0473004705c7009c0600003f055600a50473002f055600a50473002f0556
00a50473002f055600a50473002f055600a50473002f0639005504e30042
0639005504e300420639005504e3004204e3004205c7009a04e3008705c7
000f04e3fff1035cfffc037100010366000a035c000c0239000b02390003
06ac0084047200890473002d027bffc905c7008e0473005804e3009c0271
008b04e3009c0239002704e3009c0356008b04e3009c0329008b05c70097
04e3008705c7007504e3005c05c7009704e3008704e300870639006504e3
00420639006504e300420639006504e3004205c700a3031d008205c70092
031d006905c700a3031d00360556005504730042055600550473004204e3
002102aa001504e3002103b8001504e3002102aaffe305c7009c04e3007d
05c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c04e3
007d05c7009c04e3007d078d001e0639000e055600230473001504e30034
0400002104e3003404000021055600550473004204e3002102aa00150473
00360000fc910000fc900000fc250000fc180000fc2c0000fc360000fd0d
0000fc450000fcb50000fbd80000fc250000fd010000fc9d0000fcb50000
fbfb05c700120639005504e3004204e3009c0239008b05c700a104730082
05c7009704e3008705c700a3031d0080020e000802aa00e702aa002f0239
00090473008202aa0015047300300473002e047300460473003a0000fcfb
0000fc2c0000fc360239ffcc0239ffc905c7009704e300870000fc2b05c7
002905bd00a805c700a804a000a805e50019055600a8080000190564003d
05c7008f05c7008f05c700b205c4003906aa008f05c7008f0639005a05c7
008f055600a805c7005a04e500190556003106ac003d0556001b05e5008f
0556005a078d008f07ab008f06aa002f078d00a8055600a805c7005a0800
008f05cb00460473003904e3004604c5008f038d0087051d002904730035
06ac00100400002d04e3008704e3008704e3008f0538003c05c7008704e3
008704e5004604e3008704e3007f04730046040000290473001d06a80046
0473001f04e300870473003f06ac008706aa008705560029066e008704a0
00850473004606aa008704e30056055600a80473003504a000a8038d0087
023900830239008f0473002f05c7005a047300460239ffcf028900290800
00390750003c07e9008f070e0087023900040556004e0664001704e30029
05c700b204e3008f047300440617001004e30029055600310473001d05c7
008f04e3008504e300a8038d00870000fd010000fd010000fd010000fd01
0000fbd80000fd430000fc9e0000fc360000fc910000fc900000fc2c0000
fd0d0000fc450000fcb50000fd430000fc250000fc250000fc360000fc36
0000fc180000fc540000fc2c0000fc180000fc2c0000fc2c0000fc2c0000
fd0d0000fc2c0000fd010000fc360000fc240000fc9e0000000002aa0015
04e30086071d0080031d0081071d0080031d0082031d0081040a0046040a
004702390089030bffd802aa001502aa0015047300190639000d04730014
04e3007b04e3007b04e3007b0473008104bc003b04bc003b05c7005b05c7
0012049e0048055600a4055600560473004304c3003d0758009c0671007d
0633005b023d00a5043b00a502aa00e10494001b04730047011d004502aa
00af02aa00af0b620004056500bd02a500bd040000970239008502aa002f
0473000004e200af04e200af06e400af06e400af02aa002f02a500bd02aa
002f080000f1055401d00000000000000000000000000000000000000000
000000000000000000000000023900000239000002390000023900000239
000002390000023900000239000002390000000000000000000000000000
0000000000000000023900000239000002aafff6043b00a504e3007b02aa
002f02aafff6047300050473000005c7003404e3009c0473002e07920065
065c00420000fd220000fd220000fd220000fd220000fc900000fc8d0000
fd470000fc790000fc990000fc940000fc860000fc9a0000fc080000fcf1
0000fcf70000fc800000fc820000fc540000fbfb0000fc810000fc810000
fc810000fc820000fc820000fc3602aa00af04e200af02aa00af02aa00af
046400130464001904510011046e002405b4007705b400830231ff5e0231
ff6e0464ff530464ffd5046400110464001a08fa005e0816005e05c700a1
023900840472008406ab0084078f00840556002f078f002f09c8002f0c01
002f078f008405560021078f002109c8002104e3009c05c7005c05c7009c
06aa0097023900890472008906ab008906ac00890473001a06ac001a08e5
001a0b1e001a06ac00890473001a06ac001a08e5001a0239008b04730047
04e3003f071d008009d70048090f0058087b003f0876006d06af006d042c
008b09440063073f00680667005d05c700340473003b0239ffb60239ffb6
0639006504e3004205c7009c04e3007d05c7009c04e3007d05c7009c04e3
007d05c7009c04e3007d05c7009c04e3007d05c700340473003b05c70034
0473003b08000012071d00380639005504e3004205c700a1047300820639
006504e300420639006504e300420239ffb60a0c006d0939006808ab003f
0639005505c7009704e3008705c700340473003b08000012071d00380639
004704e3002a05c700340473003605c700340473003b055600a50473002f
055600a50473002f0239ff1d0239ff190239ffc60239ffcc0639006504e3
00420639006504e3004205c700a3031dffaa05c700a3031d005e05c7009c
04e3005c05c7009c04e3007d05c7009a04e3008705c700340473003b0556
00a50473002f0639006504e300420639006504e300420639006504e30042
0639006504e300420556002304730015040000970239008405c700340473
003b05c700a104e3007b05c700a104e3007b05c700a104e3007b05c7005c
0473004705c7009c04e3003f05c7009c04e3003f05c7009c04e3003f05c7
009c04e3003f05c7009c04e3003f055600a50473002f055600a50473002f
055600a50473002f055600a50473002f055600a50473002f04e3009c02aa
00150639005504e3004205c7009a04e3008705c7009a04e3008705c7009a
04e3008705c7008204e3006605c7009a04e300870239ffa80239ffa00239
ffd90239ffe905c700a10473008205c700a10473008205c700a104730082
04e3009c0239008b04e3009c0239ffbd04e3009c0239ffbd04e3009c0239
ffae06aa0097071d008006aa0097071d008006aa0097071d008005c70097
04e3008705c7009704e3008705c7009704e3008705c7009704e300870639
006504e300420639006504e300420639006504e300420639006504e30042
055600a304e3007d055600a304e3007d05c700a3031d008205c700a3031d
008205c700a3031d005105c700a3031d0001055600550473004205560055
0473004205560055047300420556005504730042055600550473004204e3
002102aa001504e3002102aa001504e3002102aaffe304e3002102aa0015
05c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c04e3
007d05c7009c04e3007d0556002f0473001a0556002f0473001a078d001e
0639000e078d001e0639000e078d001e0639000e078d001e0639000e078d
001e0639000e055600210473001a055600210473001a0556002304730015
04e300340400002104e300340400002104e300340400002104e3008702aa
fffc0639000e0473001502aa001505c700340473003b05c700340473003b
05d3003404ec003b05d7ffe804a8ff8505c70034048d003b05c700340473
003b05c700340473003b05c700340473003b05c700340473003b05c70034
0473003b05c700340473003b05c700340473003b055600a50473002f0556
00a50473002f055600a50473002f057500a5047d002f0556002b04a2ffb4
055600a50473002f055600a50473002f055600a50473002f023900840239
008902390084023900890639006504e300420639006504e3004206390065
04e300420639006504e3ffc00639006504e300420639006504e300420639
006504e3004207920065065c004207920065065c004207920065065c0042
07920065065c004207920065065c004205c7009c04e3007d05c7009c04e3
007d0758009c0671007d0758009c0671007d0758009c0671007d0758009c
0671007d0758009c0671007d055600230473001505560023047300150556
0023047300150556002304730015055600a50473002f055600a50473002f
056d008605df008e048600370486008708d9002006dd000c056d00290486
0027056d002904860027056d00860486003708d9002006dd000c054f003d
040a002b05df008e0486008705df008e048600870655005a0486005005df
005b04120050056d00170412001e056d00170412001e056d00170412001e
05ac0059047a004c074800a80600008d08000012071d003806aa0097071d
008005c700a3031d00600222ffbc05c7003705c700a204e300a205c7001b
055600a204e3003d05c700a206390068025e009305c700a20558002d071a
00ae063900ba04e300520639006805c700a2055600a204e3002f04e50029
0556002705c700420556002d06ac007b06390044025e00040556002704e5
004804d500770473002504e3006204730077038d005204e1009a04e10081
0239008d0473008d0473003104e1009a047300310400005604e5006004e3
009a0473004e04e500600400004604e1009a05c700580473001405c7006d
05c7003b0239ffe904e1009a023900710222ffb20000fd4802c601a401c7
006a01c7006a0000fc910000fc9001c7006a03290014032900140340006a
036a006a022200060222008c0376006a01c7ff9e036e006a01c7ff9e0800
0073062500310639fffe0239008902390084055400e1078d007b078d00e1
0473002f0473002f05c700340473003b0473003b055600a50473002f0556
00a50473002f055600a50473002f0239ffbb0239ffb70239008906390065
04e300420639006504e300420639006504e30042055600550473004205c7
009c04e3007d0473001a0758009c0671007d0602003f04e3ffff05c7000d
04e30087071d0080043f009c0460007f0400006004d9006e0356fff8048b
00350602005d047300350655004b048600370639006502aaffef07ac001b
07ac001b09b600870000f9290000f9d30000f9d30000f9650000f9dd0602
005d047300350655004b048600370222008c032900140464003104e30034
0400002104e3004205300087052b003f04e3007704e3003f04e3004204e3
0087054500870271008b078d003f03c60081031d008104e3003c04e3fffe
04e3fffe0800003f064c001504db001506b00015057f008b0555008b01a4
006f01a4006f0239008402aa010d02aafff602aa00af02aa000702aa010d
02aafff602aa00af02aa000701a4006f01a4006f02aaffef02aafff60272
004402720044011d0005018f0041018f004101e30041031d0007023a000b
0272003e0272003e0256000c0256000c025600130256001302aa002f0256
00250256002502560025023900210239000d011c00450256002b02390012
02560013025600130256000c0256000c02aa007b0272003e0000fc870000
fc690000fc690000fd260000fd260000fc2c0000fc2c0000fb4f0000fc69
0000fc2c0000fc870000fc810000fc810000000002390000000000000000
000000000000031d002f031d002f08dc00af07ac001b02aa00e809c6007b
07ac001b071d01040702000602aa008002aa008000000000000000000000
000000000000000000000000000006c5001b023a0020023a001b0239001b
02390020023a001a0239001b0239001e0256002501550018025600250155
002e0155000a02720044023a0020023a0047023a00200239001b023a001b
0239001b02390020023a001a0239001b0239001e02560025015500180256
00250155002e0155000a06f900340639005504e3009c04e3009c05560023
07d6fff70600002a078e001104e300820800004e06ac002f05c7005c05c7
006f04e5fffa0696000707d6002407d600310556009b04e300730556009b
04e3007304e3001306390065052b009a02ad002f036dfff605c700420306
0017030bffd804e3007b04e3007b023900090239000904e3004204e50048
04e5004804e5004804e5004804e5004804e5004804e5004804e500480629
006a063b006a086e009b081d006e078d006a07f0006a078e0070078e0048
047300770473007704730077047300770473007704730077071d006a071d
00b208cc009008c4009a0896009108c0009504e1009a04e1009a04e1009a
04e1009a04e1009a04e1009a04e1009a04e1009a078e006a078e006a093d
006a0935006a0907006a0931006a078eff9e078eff9e0239008d0239008d
0239ffbd0239ffc10239ffd10239ffc10239ffd30239ffd30425006a0425
006a05d4006a05cc006a059e006a05c8006a0425ff9e0425ff9e04e50060
04e5006004e5006004e5006004e5006004e500600800006a0800006a09af
006a09a7006a0979006a09a3006a04e1009a04e1009a04e1009a04e1009a
04e1009a04e1009a04e1009a04e1009a071d006a08c4006a08c0006a0792
ff9e05c7003b05c7003b05c7003b05c7003b05c7003b05c7003b05c7003b
05c7003b07ec006a07ec006a099b006a0993006a0965006a098f006a07ec
ff9e07ecff9e04e5004804e50048047300770473007704e1009a04e1009a
023900510239005604e5006004e5006004e1009a04e1009a05c7003b05c7
003b04e5004804e5004804e5004804e5004804e5004804e5004804e50048
04e500480899006a0878006a0a73006a0a7c006a0a15006a0a77006a09c7
006609c7006604e1009204e1009204e1009204e1009204e1009204e10092
04e1009204e1009209c7006a09c7006a0b76006a0b6e006a0b40006a0b6a
006a09c7ff9e09c7ff9e05c7003b05c7003b05c7003b05c7003b05c7003b
05c7003b05c7003b05c7003b0a25006a0a25006a0bd4006a0bcc006a0b9e
006a0bc8006a0a25ff9e0a25ff9e04e5004804e5004804e5004804e50048
04e5004804e5004804e5004805c7003705c7003706cd000606cd008c07d8
003704e1009204e1009204e1009204e1009a04e10092076300060784008c
07e2000607ca008c080700a20239ffbf0239ffaa0239ffb60239ffb60239
ffcf0239ffc9025effd2025effc2043b002d0453008c04e1009a04e1009a
04e1009a04e1009a04e3009a04e3009a04e1009a04e1009a055600270556
002707a500580797008c071d006a05c7003b05c7003b05c7003b05c7003b
05c7003b07f60045082b0059086500060899008c0852003104e500480473
007704e1009a0239008d04e5006004e1009a05c7003b06cd008c0784008c
07ca008c0453008c07d4005e0775006c0842006c0239ffb604e1009a067d
003d04f700db04f7007b03220013031e002b0464003104e5004804e50048
04e5004804e5004804e5004804e5004804e5004804e5004804e5004804e5
004804e5004804e5004804e5004804e5004804e5004804e500480239ffb6
0239ffb60239ffb50239ffb60239ffb60239ffb60239ffb60239ffb60239
ffb60239ffbe0239ffbe0239ffb50239ffbe0239ffbc0239ffbe0239ffbe
0239ffbe0239ffbe04e1009a04e1009a04e1009a04e1009a04e1009a04e1
009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a
04e1009a04e1009a04e1009a04e1009a04e1009a06cd000606cd008c0629
006a086e006a078d006a063b006a085c006a07f0006a06cd000606cd008c
0629006a086e006a078d006a063b006a085c006a07f0006a047000060453
008c0453008c0425006a05d4006a059e006a0425006a05cc006a05c8006a
047000060453008c0453008c0425006a05d4006a059e006a0425006a05cc
006a05c8006a07a500060797008c0797008c071d006a08c4006a08c0006a
071d006a08c4006a08c0006a07a500060797008c0797008c071d006a08c4
006a08c0006a071d006a08c4006a08c0006a05c700a305c7005c06390065
0239003b05aa008f055600a305c7004a0000fcfb04b5004a04e3003f0639
005a04e5004607b0004107b4004205e5001a06ac004506ac004506ac0043
06ac0043063900b405560029082200a205e1005b06ac007b05c7006d05c7
00340473001a080a00a20642005b0547001503d0001f0636003005ba0029
05c700a30473003b02aaffcc04ac009a0425009a063d009a0524008705c7
00a10473008204e300340400002108d9ffef06ddfff7054f0062040a0033
056d00a00412006a05df00a20486007c05df005f0412002c04f800220412
0028056dfff80412ffe105ac00a0047a006205ac00a0047a006205560023
0556002304d900ac037c007505ac00a004d7006206e300a00552006a0776
00a205d9007c05560023055600230731001305d100230767002505f80025
0767002505f80025075b00360543001b05df00a20486007c0473003b054f
00a6054f00a606ac007b04f0005b088a003e06a6003305c7003904e1001d
05eb002f04e3001a04730047054f0062040a003305f10022049c00140239
0089056dfff80412ffe10556002f05c7003405c7005c0473004704e3fff1
04e3002102390059031e002b04e30021055600a304e3007b04e3007b0556
00a50473002f0473002d0239fff305c7009c01a9001a01a9001a02aa000c
02aa000c02aa000702aaffe102aa00e802aa002402aa0024067d0057067d
003d067d00ad02aa00e8067d003d067d005c067d011002aa00e802aa00e8
063900680412002c0412002c055600a504e3008005c7005c06aa00970630
00970548001605c7005c05c7005c05c7005c047300470473004704730047
04e3003f061b003a06a80039062e003b0384002b062200240549003b04e5
004f02aa00bf02aa00bf02aa00bf02aa00bf025d003d025e003d03cc0009
03cc000903c3000003c3000003c3000004c2001303fe0027043c005c0444
00780444007803070055034f0012070f003e0662004405fe00350000f7dc
0698004a0545004901ec004e01f4004e01b3002a01b2000c01d3002b01d3
001a033c001f0343001f03420013033f0013033f001302ff004e0224000a
0224000b07ec003d0982004e0933004b093300020149004e0485002505d2
000705d1000d04d10014047a00200224000a0224000b044b0041044b0041
04290041038c0008049e00440000fb230000fc720000fb870000fc560000
fc4f0000fa110000fcaf0000fe390000fc470000fc100000f9d30000fc5e
04cc003c04cc00380468003c046800380821001b04a60021044400220533
003b069a0037057f003a071d006a08c4006a08c0006a05c7003705c70037
025effd3025effd20556002705560027045f001605e5001a05e5001a05e5
001a0800ffeb0800ffeb080003b40800038c080003b40800038c0800ffe9
0800ffe9080003b40800038c0800ffe90800ffe908000000045f0016011d
0045023a001e023a001802720021023a000d023a001805c7005c06390055
05c7005c045e0023063c002f04e3002105c7003405320053062500320508
003205c70058071d008006420033067800390832003604b5004a04b5004a
03470042034300470346004103430047034600570344004f034600570344
004f03a1005703940057039400570394005703a1005703a0000d03940000
039400000394000003a0000d03e9005703dd005703dd005703dd005703ea
00570397000303fc003803fc00290412001505a8003106de002e039b0073
0000fbf40000fbf40000fbe00000fbe00000fbe00000fbe00000fb9e0000
fb9e0000fcf104cc0038046800380aac0065095600420444007804440078
044400780329002a0329002a035d002a050d0028037800570378002d0329
00210329002102de003202de00320378002f019400610329005c050d005b
037800600378002f032900320378002f0378002f0378005901e4000f0378
00590383003a050d005b03290012036e00540329001a0378004604f40052
066f003604f5005204e3004204e300410501003b04fe003d0530003b078e
00420329000e019400610236005c0378005903290012036e00540329001a
0378006d0329000e040a00460604001202390089043c005c089800290724
0037052c00210558001d0320000e052b002303730017031c000f031f0010
023900920400009202390085040000970239009204000092023900850400
00970519001b070200090310007e05d500a208c00022047300400351002e
049300600473003604730036047300360473004004730034046000360473
003d03cc000903cc000903cc0009046d001603a2003a044d003804b2003a
0797003a0454003a0459003a05a0003a079e003a04d2003a042c003a090a
003a0459003a047e006b06e2003a044f003a0490003f0672003a043c006b
0616003a06dc003a0630003a0467003a0678003a043d003a0485003a042d
006b0497003a046e003a0442003a04aa003a043f006b0657003a03c0003a
0568003a04c3003a0469003a0409003a0463003a06fc003a041c00bc04d5
00b10473003e047300310000000000000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
01100000019000000190000001900000019000000190000001d4000001d4
000001d40000023c00000334000003340000040000000400000004000000
048000000574000005740000057400000574000005740000057400000574
000005740000057400000690000006900000069000000690000006900000
06900000069000000690000006e0000006e0000006e0000006e0000006e0
000006e0000006e0000006e0000006e0000006e0000006e0000006e00000
06e0000006e0000006e0000006e0000006e0000006e0000006e0000006e0
000006e0000006e0000006e0000006e00000082800000828000009040000
09b800000ae000000bac00000bac00000c4000000ca800000ca800000ca8
00000ce800000ce800000d8800000e3400000ef000000ef000000f840000
109000001124000011cc000011cc000011cc000011cc000012fc000012fc
000012fc000012fc000012fc000012fc000012fc000012fc000012fc0000
12fc000012fc000012fc000012fc000012fc000012fc000012fc000012fc
000012fc000012fc000012fc000012fc000012fc000012fc000012fc0000
12fc000012fc000012fc000012fc000012fc000012fc000012fc000012fc
000012fc000012fc000012fc000012fc000012fc000012fc000012fc0000
12fc000012fc000012fc000012fc000012fc000012fc000012fc000012fc
000012fc000012fc000012fc000012fc000012fc000012fc000012fc0000
12fc000012fc000012fc000012fc000012fc000012fc000012fc000012fc
000012fc000012fc000012fc000012fc000012fc000012fc000012fc0000
12fc000012fc000012fc000012fc000012fc000012fc000012fc000012fc
000012fc000012fc000012fc000012fc000012fc000012fc000012fc0000
12fc000012fc000012fc000012fc000012fc000012fc000012fc000012fc
000012fc000012fc000012fc000012fc000012fc000012fc000012fc0000
12fc000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000013d4000013d4000013d4000013d40000
13d4000013d4000013d4000013d4000013d4000013d4000013d4000013d4
000013d4000013d4000013d4000100000895007a0009006c000800020010
00100066000007e80b970004000100000045034200010000000000000050
000000010000000000010009005000010000000000020004005900010000
00000003002401ad0001000000000004000e01d100010000000000050008
02980001000000000006000e02a00001000000000007003202ae00010000
00000012000e045700010000000001000009046500010000000001010010
046e0001000000000102000e047e00010000000001030014048c00010000
00000104001204a00001000000000105000904b20001000000010004000e
01df0001000000010007002f02e00001000000020004000e01ed00010000
00020007003c030f0001000000030004001301fb00010000000300070030
034b0001000000040004000d020e0001000000040007003a037b00010000
00050004000d021b0001000000050007003603b500010000000600040011
02280001000000060007003003eb0001000000070007003c041b00010000
000800040013023900010000000900040011024c00010000000d00040010
025d00010004000c0004000e026d00010004001f00040010027b00010005
000a0004000d028b0003000104030002000e011700030001040400020004
00ad0003000104050002000801390003000104060002000600c700030001
040700020008006d0003000104080002000c014900030001040900020008
005d00030001040b0002000c00cd00030001040c00020008006500030001
040d00020006015500030001040e00020010015b00030001041000020012
008700030001041100020008007500030001041200020006009900030001
04130002000600810003000104140002000600d900030001041500020008
00df0003000104160002000e00b90003000104180002000a017f00030001
04190002000c00f500030001041a00020014012500030001041b00020008
018900030001041d00020006010100030001041e00020006010700030001
041f0002000a010d0003000104210002000a016b0003000104220002000c
019100030001042a0002000601a70003000104390002000a019d00030001
043e0002000a017500030001080400020004007d00030001080900020008
01410003000108160002000e00e7000300010c010002000800b100030001
0c0a0002000e009fa920313939302d32303036204170706c6520436f6d70
7574657220496e632e20a92031393831204c696e6f7479706520414720a9
20313939302d3931205479706520536f6c7574696f6e7320496e632e4865
6c766574696361426f6c640042006f006c00640047007200610073004600
650074007430dc30fc30eb30c97c974f5300560065007400470072006100
730073006500740074006fbcfcb4dcccb4004e0065006700720069007400
617c979ad406390631064a0636004e00650067007200690074006f004600
650064004c006900680061007600610046006500740042006f006c006400
4e00650067007200690074006f041604380440043d044b04390046006500
740e2b0e190e32004b0061006c0131006e004e0065006700720065007400
610050006f006400650062006c006a0061006e00690042006f006c006400
42006f006c0064038803bd03c403bf03bd03b105e205d105d4004600e900
6c006b00f6007600e900720054006500620061006c005400650062006100
6c0041006c00640069006e0042006f006c0064041604380440043d043804
39092c094b0932094d092101101ead006d48656c76657469636120426f6c
643b2031332e30643165313b20323031372d30362d313448656c76657469
636120426f6c6448656c766574696361204772617348656c766574696361
204665747448656c7665746963612067726173736574746f48656c766574
6963612076657448656c7665746963612046657448656c76657469636120
4e65677269746148656c7665746963612043617272656761646f48656c76
65746963612048616c7666657448656c766574696361206c696861766148
656c76657469636120c3d3e8cf48656c76657469636120c8d1ccd3cae748
656c76657469636120f2e1e431332e306431653148656c7665746963612d
426f6c6448656c7665746963612069732061207265676973746572656420
74726164656d61726b206f66204c696e6f7479706520414748656c766574
6963612065737420756e65206d617271756520648e706f738e6520646520
4c696e6f7479706520414748656c766574696361206973742065696e2065
696e676574726167656e657320576172656e7a65696368656e2064657220
4c696e6f7479706520414748656c766574696361208f20756e206d617263
68696f207265676973747261746f206469204c696e6f7479706520414748
656c7665746963612069732065656e206765726567697374726565726420
68616e64656c736d65726b2076616e204c696e6f7479706520414748656c
766574696361208a72206574742072656769737472657261742076617275
6d8a726b6520669a72204c696e6f7479706520414748656c766574696361
20657320756e61206d617263612072656769737472616461206465204c69
6e6f7479706520414748656c766574696361206572206574207265676973
74726572657420766172656dbe726b652074696c68bf72656e6465204c69
6e6f7479706520414748656c76657469636120426f6c644c696761747572
6573436f6d6d6f6e204c69676174757265734e756d626572205370616369
6e6750726f706f7274696f6e616c204e756d626572734d6f6e6f73706163
6564204e756d626572734e6f204368616e6765000000b8005c2bb800522b
b800482bb8003e2bb800342bb8002a2bb10840ba019000145df44009011f
04000b1fd819eebe012e000d00e6012e000d00b0012e400c0d000963833c
1f63838348294109014b00370401001f014500240401001f0144b224ab1f
b8013eb224231fb8013db224231fb80102b2371d1fb80100400937241ffd
37621ffc37b80801401b1ff824931ff724931ff6243f1ff524311fd1371d
1fd037471fcd41b80801b21fcb2ab80201b21fca24b80401400f1fc82481
1fb537291fb4373b1fb227b80401b21fb141b80401b61fa437811fa384b8
0401b21fa22ab80401b21fa124b8019ab21fa024b8019ab61f9f243f1f96
83b80401b21f9527b80401b21f8227b80401b21f7084b80801b21f6fb3b8
0801b21f6eb3b802abb61f6d24261f6224b80101400b1f5d246c1f5c2439
1f5441b80125b21f4d27b80401b61f4c27cd1f4b41b80401b21f4024b801
9ab21f3683b80401b21f3524b80201b21f3224b8019ab61f2c24bb1f2884
b80801b21f2241b8040140131f20244c1f1d24261f2ca0961f2c245e1f41
2ab801a8b748282a2448279636b801f4b21f4d27b801f4b21f9527b801f4
b21f6e27b801f4b21f6327bd01a700470029015a00250199b348296fb3b8
0190b21f83b3b8019ab348283725b803e840121fb3274827842748273627
48272527482755b80154402c0797076407550733072b072907260721071e
071b071408120810080e080c080a080808060804080208000814b8ffe040
2b0000010014061000000100060400000100041000000100100200000100
0200000001000002010802004a00b806008516763f183f123e113946443e
113946443e113946443e113946443e11394660443e11394660442b2b2b2b
2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d
59b0324b5358b0ff1d592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b4b5279b3
5279eb56456523456023456560234560b08b766818b080622020b1eb7945
65234520b003266062636820b003266165b079236544b0eb234420b15256
4565234520b003266062636820b003266165b056236544b0522344b10056
455458b156406544b25240524523614459b35045484e4565234560234565
60234560b089766818b080622020b148454565234520b003266062636820
b003266165b045236544b048234420b1504e4565234520b0032660626368
20b003266165b04e236544b0502344b1004e455458b14e406544b2504050
45236144592b2b456953420000>
[5077 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 3 <> HIBBAA+Helvetica-Bold AddT42Char 
1 4860 192 <0003001c0000045705d1000300070020006a40414c024c034d0e5c025c03
5d0e060b1f0e240a1f200103b10000040614195c1b120616070a2217171a
051f01270700148a0a161127171f1c9219192122a9216045182b2b4ef44d
f4e4fd3cd4e4de3cfde44e456544e64d003f3c3f3cfd3c3f3fed3fe4fde4
3130005d0121112115211121001617152e01232206171533152311211123
35333534373633033b0117fee9011cfee4fefd361d14261b431e02bbbbfe
e49f9c4d45d405cbfefc8afbc305d10402e801014a4f14c9fc91036fc946
ae5550000000>HIBBAA+Helvetica-Bold AddT42Char 
1 104 11 <00010059fe63029105da0013005db8005c2bba00080012005f2b411b0006
000800160008002600080036000800460008005600080066000800760008
008600080096000800a6000800b6000800c60008000d5d410500d5000800
e5000800025d00b800022fb8000c2f303113363733070607061510131617
23272627021110ce4f98d73d7e3120593484d347454e8b044eb8d470e7fd
a6c4fecefeff98ee6158ae0137012d011200>HIBBAA+Helvetica-Bold AddT42Char 
1 272 12 <00010015fe63024d05da001300344018121109131517171a120d08130903
6e0dfa09191415d52142b901ac00182b2bf4f4fd11393912394e456544e6
4d003f3f3130001712111003060f0123363712113427262f013301894f75
8b4e4547d384345920317e3dd70506b8fef2feeefed3fec9ae5861ee9801
010132c4a6fde770>HIBBAA+Helvetica-Bold AddT42Char 
1 400 17 <00010080000001af012a0003002640130128030a0517171a017000190405
70217f3c182b2b4ef44dfd4e456544e6003f4ded31301321112180012ffe
d1012afed6000000>HIBBAA+Helvetica-Bold AddT42Char 
1 468 20 <0001008e0000030705aa000d0032401e29053905020d01cc09040c0c0bb3
000938200c300c600cb00c040c0f470e1076c418d45de4cced003f3ff4cd
3130005d13353637363736373635331121118e8736563625130bedfedc03
e8c2060c133927412713fa5603e8>HIBBAA+Helvetica-Bold AddT42Char 
1 572 21 <000100400000042105b1002100884061071401041b071c6f1203041d1901
1618660160046206671a97019502981aa6010b001910193419351c041c19
0402041e0f0a4013051ea1210c1e1c04030e07b316731f01020e630f7c1f
a7102101702180219021a021b021d021f02107212347224e1076c418d45d
71e44df4ed393910f4ed111739003ffd3feddd111739015d31305d710071
36373637363736353426232207060721363736213204151407060f010e01
07211521443f3de3c53a59665f822f1b05feeb073c720123e60110603f90
726b4f1b0279fc1f9c8191a28d3d5f715c7a61387ab972d9ffd2a17d5366
514c442dfb000000>HIBBAA+Helvetica-Bold AddT42Char 
1 820 23 <000200360000042f05a1000a000d008f40450e0c480c480d8f0cdc0c051f
0c0158077a0789079907a80705050d460d830dd60d04110d01040500030c
090d0a01080b0d0a030c0c0d0df512060607060c07040a0df70005b8014c
4009030c0d07050c03b30abb013a0001000901a9b3060f470e4e1076c418
4dd4f43ce4fd3c113939003ff43cfd3c3f393901872e2b047d10c50f0f0f
31300172715d0072710123112111213501211133211101042fa4fee9fdc2
02150140a4fe45fe950138fec80138f90370fc760272fd8e>HIBBAA+Helvetica-Bold AddT42Char 
1 1024 26 <00010034000004380597000e003e402416021503f70503000ca10d04070c
0b00068307c60d7300a8100c300c02d00c010c10470f4e1076c418d45d71
e44df4f4ed1139003f3ffd393130015d0106020706021521121312372113
21043840e44d3d62fed80df39d6afd2d04040004b83ffebdac87fe7a7d01
8601a50105670100>HIBBAA+Helvetica-Bold AddT42Char 
1 1680 44 <00020084000001b605df00030004003040110402020108040617171a0400
2501190506ba014b00210135b179182b2b4ef44dfd394e456544e62f003f
3f3c3130290111212701b6fece01329905c21d00>HIBBAA+Helvetica-Bold AddT42Char 
1 1760 68 <0003003bffde0438045f000e0039003a008f404f3b0235367901890104d8
1e0126f3e62ae7230e0d05020005131a2b24232204262e262e2a0d050200
041b0b221b162c3a1f072a0a0b2c320b3a134d004d2e3a352a3e261a3c1a
4d1b2d084d35193b3cbc01190021004801ae00182b2b4ef44dedf4ed4e10
f64de41139cde5e52f003fed3f3f3cfdcd39111217391239390111121739
111217392b3130015d005d010e010f010607061514163332363727363736
35342623220706072136373621321716151114171e011715212e01270607
0623222635343736371302de1b3730405a2742513a5c9b03ad4f223d5d5a
652a1e0afeed0947710113b38b8b02031c1cfeca0d0a033b4d5c7494c19b
55a57002121115090c1017275249416c8fef0a0f1a37433332253f8f5c90
4747c5fe0c344a38280d2a213a25402d35a99bc95a311501d4000000>HIBBAA+Helvetica-Bold AddT42Char 
1 2308 71 <0002003fffde046505c00010001d004f402ce80c010706151d0210030017
241007060a1d240a0b15031a131f061f0327041a1f1a360d191e1f982148
45182b2b4ef44ded4e10f64dfdf4e4111239003fed3f3fed3f1139113912
393130005d00161711211121350e01232200351000331236353427262322
0615141633027a9a300121feeb3d9c74bffefb0101d7b77e653e527d7577
79045c574d0208fa409761580135f201170140fc72b48fc85634bd8c97b5
>HIBBAA+Helvetica-Bold AddT42Char 
1 2488 72 <0003002fffdc043a045f00060021002200ab4049460887149701990a0406
0109050610051a4b05461049208601850f871f0a03160317131613174808
4c164c17491a5c165c175a1adc01db04e91de720f720104a014610880583
100402b8019540334f0e5f0e6f0e030e0e1b062422210717122c1b0b1603
02220336177b221e600c800c020c1a24021f0e951e1923249821484e182b
2b4ef44dfde44e10f65d4d1139e4ed2f111239003fedcd3f3ced12392f5d
fd313000715d01715d000607212e01233616171617160721161716333237
3637210607062322001110003b0101d06d0e01bb077b5b88da4740130b02
fd1606613b5358371e1701230b5a8cfcd0fec2011fe51403747c6a7175eb
666e61804b8da44229321b3061649f010c012e011b012e000000>HIBBAA+Helvetica-Bold AddT42Char 
1 2784 73 <000100150000028b05d100170081412f00150003002c0002001f004f0004
005f000400020004002c00170001000b0010005c001200090006000e000a
001900170017001a000a001f0003000d0015001600090027000e001f0013
00920010001900180019010e00210060006600182b2b4ef44df4e4fd3939
3cd4f44e456544e6003f3f3c4dfd3c3fed5df4ed393130001617152e0106
151415331523112111233533353437363302322c2618712bbbbbfee49f9c
3b3eed05d10303e803033520203cc9fc91036fc946af4262>HIBBAA+Helvetica-Bold AddT42Char 
1 2988 75 <000100870000045e05bd0017003f402505022702580e680e04141712000c
24170710070a0836051a1913102711191819be215045182b2b4ef44dfd3c
4e10f64ded003f3c3fed3f11393130015d0016171e011511211134272623
22061511211121113e01330343a5352d14fedd1e276d7175fee4011c3ea3
5a045e46483d8192fd80029758364c978cfdb205bdfdf75f4b000000>HIBBAA+Helvetica-Bold AddT42Char 
1 3136 76 <00020089000001aa05cb00030007003b40224c004c015c005c010401b102
000406070a0917171a0006270107190809b2215045182b2b4ef43c4dfd3c
4e456544e6003f3f3f4ded3130005d012111210121112101aafedf0121fe
df0121fedf04c40107fe77fbbe00>HIBBAA+Helvetica-Bold AddT42Char 
1 3304 81 <0002008700000461045f00160017004b402d0501150125013701580b680b
060112100609241716070e040a170536170f021a19110e270f191819be21
5045182b2b4ef44dfdc44e10f64d1139ed2f003f3c3f3ced3f3939313001
5d001615112111342726232207061511211121153637363327038ad7fedc
172a7691361cfee401133731588769045cb1cdfd220297562e547b4165fd
b204409f542542030000>HIBBAA+Helvetica-Bold AddT42Char 
1 3464 82 <00030042ffda049c0465000b00170018004d4028170301080c880c881003
170d180f660d0305241814070b240e0b1818080236171a1a08361119191a
b80176b321484e182b2b4ef44ded4e10f64ded11392f003fed3f3ced3130
017200727124363534262322061514163324002120003534002120001501
02eb86867d7d87877d022efeecfee7fee7feec0114011901190114fdd3c9
b2a4a4b1b1a4a4b266feab0155f0ec015afea6ec0240>HIBBAA+Helvetica-Bold AddT42Char 
1 3972 86 <00020042ffdb04250461002b002c007e404f09100626190d030904210b0b
4b0a490b472144204829d703081d22200c0a04162b04161a2c2c1207042c
280b2c2c0f150a201d164d2207152d074d251a2e0c001d4d0f2d004d2b19
2d2e8721484e182b2b4ef44dedf4ed12394e10f64dedf41139ed11393911
12392f003fed3f3cfdcd10cd11173931305e5d5e015d0116171633323635
342726252627263534363332041721262726232206151417161716171615
140623202635010163091e358f54632828feffb94c4cedd7cc010113fee3
06192f715d4f2a2affaa5554f1fcfefff501fb015c4c203932323019193d
2e45448097d9a3c837203a3a27311617382851527ba2cdd9a8030300>HIBBAA+Helvetica-Bold AddT42Char 
1 4240 87 <00010015ffea027805680016004ab6102c0f1f0c2c11ba01710004015c40
1607005c0601061817171a0f06f4040927009203151718b8010eb3216066
182b2bd43ce4fd3cf43c4e456544ee4d003f3cfd3ced3ffdf4e431301335
3311211133152311141633323637150706272635111598011ab1b122570d
1d0e87ca4a30036dcb0130fed0cbfdc043210101d505074d3166029f>HIBBAA+Helvetica-Bold AddT42Char 

1 0 172 <> HIBBAA+Helvetica-Bold AddT42Char 
1 0 0 <0002009a0000053d05c200030007003e402105061d02010004071d03000a
05041d0303021a0906071d0100190809aa216c3c182b2b4ef43c4dfd3c4e
10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111271121119a04a3b8
fccd05c2fa3eb80452fbae000000>HIBBAA+Helvetica-Bold AddT42Char 
HIBBAA+Helvetica-Bold /CharStrings get begin
/space 3 def
/fi 192 def
/parenleft 11 def
/parenright 12 def
/period 17 def
/one 20 def
/two 21 def
/four 23 def
/seven 26 def
/I 44 def
/a 68 def
/d 71 def
/e 72 def
/f 73 def
/h 75 def
/i 76 def
/n 81 def
/o 82 def
/s 86 def
/t 87 def
/nobreakspace 172 def
end
HIBBAA+Helvetica-Bold /Encoding get
dup 32 /space put
dup 33 /fi put
dup 40 /parenleft put
dup 41 /parenright put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 55 /seven put
dup 73 /I put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 115 /s put
dup 116 /t put
dup 160 /nobreakspace put
pop
end
%ADOEndSubsetFont
/SQXXLD+Helvetica-Bold /HIBBAA+Helvetica-Bold findfont ct_VMDictPut
/SQXXLD+Helvetica-Bold*1 
[32{/.notdef}rp /space /fi 6{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 
2{/.notdef}rp /one /two /.notdef /four 2{/.notdef}rp /seven 17{/.notdef}rp 
/I 23{/.notdef}rp /a 2{/.notdef}rp /d /e /f /.notdef 
/h /i 4{/.notdef}rp /n /o 3{/.notdef}rp /s /t 
43{/.notdef}rp /nobreakspace 95{/.notdef}rp]
SQXXLD+Helvetica-Bold nf
SQXXLD+Helvetica-Bold*1 [8.63117 0 0 -8.63117 0 0 ]msf
139.785 276.197 mo
(hidden\240)sh
170.466 276.197 mo
(node is added)sh
SQXXLA+Helvetica*1 [8.63117 0 0 -8.63117 0 0 ]msf
150.809 286.267 mo
(in the !rst layer)sh
SQXXLD+Helvetica-Bold*1 [8.63117 0 0 -8.63117 0 0 ]msf
104.293 96.3814 mo
(If \(4.7\) is)sh
139.301 96.3814 mo
( )sh
104.293 106.451 mo
(satis!ed)sh
222.253 96.3814 mo
(If \(4.12\) is)sh
262.059 96.3814 mo
( )sh
222.253 106.451 mo
(satis!ed)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
269.724 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
274.354 257.497 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
301.372 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
306.002 257.497 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
331.581 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
336.211 257.497 mo
($)sh
%ADOBeginSubsetFont: PBAAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SQXXLA+Helvetica gcheck setglobal} if
1 4084 90 <00010012000005a1042f000c0120407e4704aa09028e09014607490b8703
8a08850aca02c403c607c908c60ac90b0b66076a08650a690b7607790876
0a790b85078a0b0a4607490b0247037700780503572816282b012b043b01
3b048f018f0406090401030b020305060c050006080a0b03070a0e17171a
0705069b080304c40a0209c40b00019b0c190d677e182b194e10f4184dfd
3939fd3939fd3939fd3939194e456544e618003f173c3f173c1217395d4b
5179400c0529120607060029120c0c0b0587102b87102b4b5279b4090a09
080ab8018b401312010102070604050529120606070908090a08b8018b40
0e120404030b0c00010029120c0c0b01874d2e2b87107dc41805872e182b
087d10c505872e182b877d10c405872e182b087d10c53130015d71717100
715d1b02331b013301230b012301d7ced1cad2dbb4fec9bbdad3bbfecb04
2ffcb4034cfcb90347fbd1033dfcc3042f00>SQXXLA+Helvetica AddT42Char 

1 0 172 <> SQXXLA+Helvetica AddT42Char 
SQXXLA+Helvetica /CharStrings get begin
/w 90 def
/nobreakspace 172 def
end
SQXXLA+Helvetica /Encoding get
dup 119 /w put
dup 160 /nobreakspace put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SQXXLA+Helvetica*1 
[32{/.notdef}rp /space /fi 15{/.notdef}rp /one 15{/.notdef}rp /A 2{/.notdef}rp 
/D 7{/.notdef}rp /L 7{/.notdef}rp /T 12{/.notdef}rp /a 2{/.notdef}rp 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t 2{/.notdef}rp 
/w /.notdef /y 38{/.notdef}rp /nobreakspace 95{/.notdef}rp]
SQXXLA+Helvetica nf
SQXXLA+Helvetica*1 [8.63117 0 0 -8.63117 0 0 ]msf
269.983 276.197 mo
(The )sh
%ADOBeginSubsetFont: HIBBAA+Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SQXXLD+Helvetica-Bold gcheck setglobal} if
1 2088 70 <00020047ffda0434045f001d001e006e40459916a81602871c0149155812
6812780a7912b815c713c81508180206041dd204241e1a07160e0a0c10b7
0c24140b1e10360f1f00361e171d1a20083617191f208721484e182b2b4e
f44ded4e10f64d1139fdf4ed2f003feded113939393f3ceded1139393931
30015d71005d012627262322070615141716333236372106070621200235
1000333204170103100821306590351c1c338d64540901230a5486fef9fe
f9f80112f1cd010518fe1b02bb3d31428f4c7e7849886c568274bb0138f9
01190138b8e901a40000>SQXXLD+Helvetica-Bold AddT42Char 
1 3240 79 <0001008b000001a805c20003002540130200010a0517171a002701190405
b2215045182b2b4ef44dfd4e456544e6003f3f31302901112101a8fee301
1d05c200>SQXXLD+Helvetica-Bold AddT42Char 
1 3824 85 <00010082000002fb045c0013004ab900030147b3020f0d06b80147401913
070d060c0a200230024002031517171a020e0b270c191415b80164b32150
66182b2b4ef44dfdc4d44e456544e64d5d003f3f3fed1139d4ed31300016
17112e01232207061511211121153637363302dd0b131b2a0dac3b21fee1
011042315080045c0101fedc0302703f83fdf70442be6d2843000000>SQXXLD+Helvetica-Bold AddT42Char 
1 4388 88 <0002007dffe80455045f0019001a004c402e0a161a162a16381656076507
061a070a0006160e0d0a0524140b1a0d0a271a180b1a1c013618191b1cbe
215045182b2b4ef44ded4e10f612394dfdd42f003fed3f39393f3c3f3130
015d0111141716333237363511211121350e01070e012322272635112501
a116277292361c0121feeb042016437d54f2542f01ec0442fd6f5d2f5376
40690251fbbe9a0532133c2cae60bb02911d>SQXXLD+Helvetica-Bold AddT42Char 
1 4556 92 <00020015fe470450045f0013001400d94070270a560a660a950aa40ad30a
06050a0106061c07110d2d07200d3d07310d4b075d07580b680b7707790d
0d170f360d8709880b980bb80b0614140c080d02200c0c27120b0b0a0607
021f0808271209090a0607020d0a150c0b0908060709001f022c131f100f
14071617171a0e0d0b0cb8010cb30607090ab8010c400c13920819651516
a9216066182b2b764ef44de418fc393939fc393939194e456544e618003f
3f4de4fde43f3f3c3c3c12393911123901872e2b057d104b52787ac53387
2e182b7d104b52787ac5011112392f3130015d7100715d1f011636373e01
2701211b01210102062322262701b1242a4c1a192b04fe70013deee1012f
fe8a6c7ebd262e2e0182d102020a12116c0c0472fcdc0324fbd0feca9501
03061400>SQXXLD+Helvetica-Bold AddT42Char 
SQXXLD+Helvetica-Bold /CharStrings get begin
/c 70 def
/l 79 def
/r 85 def
/u 88 def
/y 92 def
end
SQXXLD+Helvetica-Bold /Encoding get
dup 99 /c put
dup 108 /l put
dup 114 /r put
dup 117 /u put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SQXXLD+Helvetica-Bold*1 
[32{/.notdef}rp /space /fi 6{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 
2{/.notdef}rp /one /two /.notdef /four 2{/.notdef}rp /seven 17{/.notdef}rp 
/I 23{/.notdef}rp /a /.notdef /c /d /e /f 
/.notdef /h /i 2{/.notdef}rp /l /.notdef /n /o 
2{/.notdef}rp /r /s /t /u 3{/.notdef}rp /y 38{/.notdef}rp 
/nobreakspace 95{/.notdef}rp]
SQXXLD+Helvetica-Bold nf
SQXXLD+Helvetica-Bold*1 [8.63117 0 0 -8.63117 0 0 ]msf
287.245 276.197 mo
(second hidden)sh
268.286 286.267 mo
(layer is constructed)sh
SQXXLA+Helvetica*1 [8.63117 0 0 -8.63117 0 0 ]msf
272.837 296.337 mo
(with\240)sh
290.583 296.337 mo
(1 hidden node)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
288.425 15.1045 mo
(")sh
SQXXLC+*1 [10.4437 0 0 -10.4437 0 0 ]msf
296.101 15.1045 mo
( )sh
306.126 15.1045 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
54.6641 142.414 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
59.2943 137.379 mo
( )sh
61.7443 137.379 mo
(!)sh
65.4306 137.379 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
59.2943 145.291 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
85.5924 140.976 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
90.2227 135.941 mo
( )sh
92.6727 135.941 mo
(!)sh
96.3589 135.941 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
90.2227 143.853 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
154.642 141.695 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
159.272 136.66 mo
( )sh
161.722 136.66 mo
(!)sh
165.408 136.66 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
159.272 144.572 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
190.605 141.695 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
195.235 136.66 mo
( )sh
197.685 136.66 mo
(!)sh
201.372 136.66 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
195.235 144.572 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
255.339 178.378 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
259.969 173.343 mo
( )sh
262.419 173.343 mo
(!)sh
266.105 173.343 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
259.969 181.255 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
308.564 140.976 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
313.195 135.941 mo
( )sh
315.645 135.941 mo
(#)sh
319.331 135.941 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
313.195 143.853 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
281.952 141.695 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
286.582 136.66 mo
( )sh
289.032 136.66 mo
(#)sh
292.718 136.66 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
286.582 144.572 mo
(!)sh
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: SQXXKW+ AddGlyphs
systemdict begin SQXXKX+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g3A {556 0 78 -653 633 0 setcachedevice
633 -653 mo
444 -653 li
444 -637 li
473 -634 li
502 -631 513 -623 513 -606 cv
513 -579 469 -517 364 -393 cv
325 -347 li
294 -457 li
270 -542 258 -586 258 -601 cv
258 -623 270 -631 330 -637 cv
330 -653 li
91 -653 li
91 -637 li
147 -629 153 -621 168 -569 cv
244 -302 li
185 -97 li
167 -33 144 -20 78 -16 cv
78 0 li
367 0 li
367 -16 li
331 -19 li
292 -22 278 -31 278 -56 cv
278 -77 285 -104 308 -183 cv
344 -306 li
563 -576 li
596 -617 604 -627 633 -637 cv
633 -653 li
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/SQXXKX+*1 
[32{/.notdef}rp /g5A /g59 /g4C /g55 /g3A 219{/.notdef}rp]
SQXXKX+ nf
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
42.7962 83.4347 mo
($)sh
false sop
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: SQXXLE+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /SQXXLE+ def
/FontMatrix [0.001 0 0 -0.001 0 0 ] def
/FontBBox [0 0 0.979 0.777 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /gC put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/gC {979 0 0 -777 979 -564 setcachedevice
979 -564 mo
514 -777 li
466 -777 li
0 -564 li
99 -564 li
490 -709 li
880 -564 li
979 -564 li
cp
false sop
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/SQXXLF+ /SQXXLE+ findfont ct_VMDictPut
/SQXXLF+*1 
[32{/.notdef}rp /gC 223{/.notdef}rp]
SQXXLF+ nf
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
41.7735 80.5576 mo
( )sh
false sop
1 /0 /CSD get_res sepcs
1 sep
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
52.0006 84.8732 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
75.8824 83.4347 mo
($)sh
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
74.8597 80.5576 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
85.0867 84.8732 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
146.37 83.4347 mo
($)sh
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
145.348 80.5576 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
155.575 84.8732 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
179.456 83.4347 mo
($)sh
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
178.434 80.5576 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
188.661 84.8732 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
272.242 83.4347 mo
($)sh
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
271.219 80.5576 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
281.446 84.8732 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
305.328 83.4347 mo
($)sh
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
304.305 80.5576 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
314.532 84.8732 mo
(#)sh
SQXXLD+Helvetica-Bold*1 [8.63117 0 0 -8.63117 0 0 ]msf
345.966 96.3814 mo
(If \(4.7\) is)sh
380.974 96.3814 mo
( )sh
345.966 106.451 mo
(satis!ed)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
401.349 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
405.98 257.497 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
432.997 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
437.627 257.497 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
463.206 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
467.836 257.497 mo
($)sh
%ADOBeginSubsetFont: PBAAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SQXXLA+Helvetica gcheck setglobal} if
1 1236 70 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>SQXXLA+Helvetica AddT42Char 
SQXXLA+Helvetica /CharStrings get begin
/c 70 def
end
SQXXLA+Helvetica /Encoding get
dup 99 /c put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SQXXLA+Helvetica*1 
[32{/.notdef}rp /space /fi 15{/.notdef}rp /one 15{/.notdef}rp /A 2{/.notdef}rp 
/D 7{/.notdef}rp /L 7{/.notdef}rp /T 12{/.notdef}rp /a /.notdef 
/c /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l 
/m /n /o /p /.notdef /r /s /t 
2{/.notdef}rp /w /.notdef /y 38{/.notdef}rp /nobreakspace 95{/.notdef}rp]
SQXXLA+Helvetica nf
SQXXLA+Helvetica*1 [8.63117 0 0 -8.63117 0 0 ]msf
392.73 276.197 mo
(A )
[5.75693 0 ]xsh
SQXXLD+Helvetica-Bold*1 [8.63117 0 0 -8.63117 0 0 ]msf
400.877 276.197 mo
(hidden\240)sh
431.559 276.197 mo
(node is added)sh
SQXXLA+Helvetica*1 [8.63117 0 0 -8.63117 0 0 ]msf
404.935 286.267 mo
(in the second layer)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
373.298 178.378 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
377.928 173.343 mo
( )sh
380.378 173.343 mo
(!)sh
384.065 173.343 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
377.928 181.255 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
439.47 140.976 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
444.101 135.941 mo
( )sh
446.551 135.941 mo
(#)sh
450.237 135.941 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
444.101 143.853 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
413.577 141.695 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
418.207 136.66 mo
( )sh
420.657 136.66 mo
(#)sh
424.343 136.66 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
418.207 144.572 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
403.867 83.4347 mo
($)sh
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
402.844 80.5576 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
413.071 84.8732 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
436.953 83.4347 mo
($)sh
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
435.93 80.5576 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
446.157 84.8732 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
468.241 178.378 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
472.871 173.343 mo
( )sh
475.321 173.343 mo
(!)sh
479.008 173.343 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
472.871 181.255 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
435.155 40.9981 mo
(#)sh
SQXXLC+*1 [10.4437 0 0 -10.4437 0 0 ]msf
441.111 40.9981 mo
( )sh
451.136 40.9981 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
530.817 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
535.447 257.497 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
562.465 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
567.095 257.497 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
592.674 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
597.304 257.497 mo
($)sh
%ADOBeginSubsetFont: HIBBAA+Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SQXXLD+Helvetica-Bold gcheck setglobal} if
1 1396 36 <00030034000005a805c20002000a000b00dc406b6802012705280a380637
094806680a780a880488069a0395049806aa03a504a806b801b80ac801c8
0ad803d80a150107060602000809090200080a01070502140a0a25120909
02140505251206060207082a010000020a0b04030206090a0305080b0d17
171a0b0a040605b80114b2090302b80114b60a190c657572182b764e10f4
184dfd3939fd39391139194e456544e6182f003f173c4d3f3c3c1239392f
3cfd3c05872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b0
03c01bb003c4591112393912393987103c3c07103c3c3130015d005d0121
0b012101210321032101022f0176b8ab015c020afeb25ffde166febe02ba
022d02440151fa3e012ffed105c2>SQXXLD+Helvetica-Bold AddT42Char 
1 3636 83 <0002007dfe53049a045a000d0020004a40291713080a1c1a022420071a06
0a24130b190e080d180d36101a22061f1b1f1827191921229821504e182b
2b4ef44dfdf4e44e10f64ded111239003f3fed3f3fed1139113912393130
002623220706151417163332363512001110002322272627112111211536
373633037473819b3a1e653c52777d1d0109fefdcc82562f2dfee601112e
345f83029fc2934e78be4d2db8990239fee6feeffee0fed2412445fdc805
efa1472949000000>SQXXLD+Helvetica-Bold AddT42Char 
SQXXLD+Helvetica-Bold /CharStrings get begin
/A 36 def
/p 83 def
end
SQXXLD+Helvetica-Bold /Encoding get
dup 65 /A put
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SQXXLD+Helvetica-Bold*1 
[32{/.notdef}rp /space /fi 6{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 
2{/.notdef}rp /one /two /.notdef /four 2{/.notdef}rp /seven 9{/.notdef}rp 
/A 7{/.notdef}rp /I 23{/.notdef}rp /a /.notdef /c /d 
/e /f /.notdef /h /i 2{/.notdef}rp /l /.notdef 
/n /o /p /.notdef /r /s /t /u 
3{/.notdef}rp /y 38{/.notdef}rp /nobreakspace 95{/.notdef}rp]
SQXXLD+Helvetica-Bold nf
SQXXLD+Helvetica-Bold*1 [8.63117 0 0 -8.63117 0 0 ]msf
536.594 276.197 mo
(A hidden\240)sh
575.906 276.197 mo
(node)sh
SQXXLA+Helvetica*1 [8.63117 0 0 -8.63117 0 0 ]msf
596.517 276.197 mo
( in)sh
525.793 286.267 mo
(the !rst layer\240)sh
SQXXLD+Helvetica-Bold*1 [8.63117 0 0 -8.63117 0 0 ]msf
577.592 286.267 mo
(is pruned)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
503.485 178.378 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
508.115 173.343 mo
( )sh
510.565 173.343 mo
(!)sh
514.251 173.343 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
508.115 181.255 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
569.657 140.976 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
574.288 135.941 mo
( )sh
576.737 135.941 mo
(#)sh
580.424 135.941 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
574.288 143.853 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
543.044 141.695 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
547.675 136.66 mo
( )sh
550.125 136.66 mo
(#)sh
553.811 136.66 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
547.675 144.572 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
533.334 83.4347 mo
($)sh
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
532.312 80.5576 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
542.539 84.8732 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
566.421 83.4347 mo
($)sh
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
565.398 80.5576 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
575.625 84.8732 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
604.182 178.378 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
608.812 173.343 mo
( )sh
611.262 173.343 mo
(!)sh
614.948 173.343 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
608.812 181.255 mo
(#)sh
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
555.272 40.9981 mo
(#)sh
%ADOBeginSubsetFont: SQXXLB+ AddGlyphs
systemdict begin SQXXLC+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g13 {500 0 29 -676 474 0 setcachedevice
474 -137 mo
460 -143 li
427 -87 406 -76 364 -76 cv
130 -76 li
295 -252 li
384 -346 423 -421 423 -500 cv
423 -599 351 -676 238 -676 cv
115 -676 51 -594 30 -477 cv
51 -472 li
91 -570 126 -602 198 -602 cv
283 -602 337 -552 337 -461 cv
337 -376 301 -300 207 -201 cv
29 -12 li
29 0 li
420 0 li
474 -137 li
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/SQXXLC+*1 
[32{/.notdef}rp /gC /g12 /g13 221{/.notdef}rp]
SQXXLC+ nf
SQXXLC+*1 [10.4437 0 0 -10.4437 0 0 ]msf
561.228 40.9981 mo
( )sh
571.253 40.9981 mo
(")sh
false sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HIBBAA+Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SQXXLD+Helvetica-Bold gcheck setglobal} if
1 1152 27 <00030036ffda042505b1000b0023002f00624016681f011a0e0e08262620
2c4014050240200d1a176329b8015fb605831d0e11632fb8015f40160b83
1da81023302302a023b023d023f02304233147304e1076c418d45d71e44d
fdf4ed3910fdf4ed39003fed3fed12392fcd392ec4313001015d00163332
36353426232206152436372e01353436333216151406071e011514002322
0235001633323635342623220615015e6f62626f71606071fed86f6b693f
eed9d9ee3f696b6cfef1f3f3fa01426156575f5f575661013a76766b6f73
736f67c63246a3479edfdf9e47a33c3cc67ab7feff0101b7023364644f56
61615600>SQXXLD+Helvetica-Bold AddT42Char 
SQXXLD+Helvetica-Bold /CharStrings get begin
/eight 27 def
end
SQXXLD+Helvetica-Bold /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SQXXLD+Helvetica-Bold*1 
[32{/.notdef}rp /space /fi 6{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 
2{/.notdef}rp /one /two /.notdef /four 2{/.notdef}rp /seven /eight 
8{/.notdef}rp /A 7{/.notdef}rp /I 23{/.notdef}rp /a /.notdef /c 
/d /e /f /.notdef /h /i 2{/.notdef}rp /l 
/.notdef /n /o /p /.notdef /r /s /t 
/u 3{/.notdef}rp /y 38{/.notdef}rp /nobreakspace 95{/.notdef}rp]
SQXXLD+Helvetica-Bold nf
SQXXLD+Helvetica-Bold*1 [8.63117 0 0 -8.63117 0 0 ]msf
477.591 96.3814 mo
(If \(4.8\) is)sh
512.599 96.3814 mo
( )sh
477.591 106.451 mo
(satis!ed)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
680.424 15.1045 mo
(")sh
SQXXLC+*1 [10.4437 0 0 -10.4437 0 0 ]msf
688.1 15.1045 mo
( )sh
698.125 15.1045 mo
(")sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
653.092 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
657.722 257.497 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
684.74 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
689.37 257.497 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
714.949 256.058 mo
(!)sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
719.579 257.497 mo
($)sh
SQXXLA+Helvetica*1 [8.63117 0 0 -8.63117 0 0 ]msf
644.472 276.197 mo
(The !rst )sh
SQXXLD+Helvetica-Bold*1 [8.63117 0 0 -8.63117 0 0 ]msf
678.041 276.197 mo
(hidden\240)sh
708.723 276.197 mo
(layer)sh
667.252 286.267 mo
(is pruned)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
691.213 140.976 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
695.843 135.941 mo
( )sh
698.293 135.941 mo
(#)sh
701.979 135.941 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
695.843 143.853 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
665.319 141.695 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
669.95 136.66 mo
( )sh
672.4 136.66 mo
(#)sh
676.086 136.66 mo
(")sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
669.95 144.572 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
655.609 83.4347 mo
($)sh
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
654.587 80.5576 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
664.814 84.8732 mo
(!)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
688.696 83.4347 mo
($)sh
SQXXLF+*1 [10.4437 0 0 -10.4437 0 0 ]msf
687.673 80.5576 mo
( )sh
SQXXKZ+*1 [7.37965 0 0 -7.37965 0 0 ]msf
697.9 84.8732 mo
(#)sh
SQXXLD+Helvetica-Bold*1 [8.63117 0 0 -8.63117 0 0 ]msf
608.498 96.3814 mo
(If \(4.14\) is)sh
648.304 96.3814 mo
( )sh
608.498 106.451 mo
(satis!ed)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
71.9264 40.9981 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
295.618 40.9981 mo
(#)sh
SQXXKX+*1 [10.4437 0 0 -10.4437 0 0 ]msf
689.055 40.9981 mo
(#)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/SQXXLF+*1 uf
/SQXXLF+ uf
/ uf
/SQXXLC+*1 uf
/SQXXLC+ uf
/ uf
/SQXXLD+Helvetica-Bold*1 uf
/SQXXLD+Helvetica-Bold uf
/HIBBAA+Helvetica-Bold uf
/SQXXLA+Helvetica*1 uf
/SQXXLA+Helvetica uf
/PBAAAA+Helvetica uf
/SQXXKX+*1 uf
/SQXXKX+ uf
/ uf
/SQXXKZ+*1 uf
/SQXXKZ+ uf
/ uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
